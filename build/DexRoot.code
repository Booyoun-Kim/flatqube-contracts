.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode initial_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: initial_owner
; constructor DexRoot
ACCEPT
; expValue
; end expValue
;; push identifier initial_owner
DUP
; colValue
SETGLOB 17
; end colValue
; end constructor DexRoot
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installPlatformOnce
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function installPlatformOnce
;; !
;; push identifier has_platform_code
GETGLOB 12
NOT
THROWIFNOT 108
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
TRUE
; colValue
SETGLOB 12
; end colValue
;; transfer()
;; push identifier owner
GETGLOB 17
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function installPlatformOnce
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installOrUpdateAccountCode
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function installOrUpdateAccountCode
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 13
; end colValue
;; ++
; expValue
;; fetch account_version
GETGLOB 14
; end expValue
INC
UFITS 32
; colValue
SETGLOB 14
; end colValue
;; transfer()
;; push identifier owner
GETGLOB 17
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function installOrUpdateAccountCode
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installOrUpdatePairCode
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function installOrUpdatePairCode
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 15
; end colValue
;; ++
; expValue
;; fetch pair_version
GETGLOB 16
; end expValue
INC
UFITS 32
; colValue
SETGLOB 16
; end colValue
;; transfer()
;; push identifier owner
GETGLOB 17
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function installOrUpdatePairCode
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getAccountVersion
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getAccountVersion
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier account_version
GETGLOB 14
; end function getAccountVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbb296644
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getPairVersion
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getPairVersion
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier pair_version
GETGLOB 16
; end function getPairVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xaae57883
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro upgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function upgrade
;; get member balance
GETPARAM 7
INDEX 0
;; >
PUSHINT 1000000000
;; +
PUSHINT 5000000000
ADD
UFITS 128
GREATER
THROWIFNOT 103
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier owner
GETGLOB 17
STSLICER
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier platform_code
GETGLOB 11
STREFR
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier account_code
GETGLOB 13
STREFR
; colValue
NIP
; end colValue
; expValue
DUP
; end expValue
;; push identifier pair_code
GETGLOB 15
STREFR
; colValue
NIP
; end colValue
;; push identifier code
PUSH S1
SETCODE
;; push identifier code
PUSH S1
CTOS
BLESS
POP c3
;; push identifier builder
DUP
ENDC
CALLREF {
	CALL $:onCodeUpgrade$
}
DROP
; end function upgrade
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
PUSHINT 1
CALL 1
;; param: data
; function onCodeUpgrade
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro requestUpgradeAccount
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode current_version
LDU 32
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: current_version
;; param: send_gas_to
;; param: account_owner
; modifier onlyAccount
;; push identifier account_owner
DUP
PUSHINT 1
;; push identifier account_owner
PUSH S1
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; decl: expected
;; get member sender
GETGLOB 9
;; push identifier expected
PUSH S1
SDEQ
THROWIFNOT 105
; function requestUpgradeAccount
PUSHINT 1000000000
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; if
;; push identifier current_version
PUSH S4
;; ==
;; push identifier account_version
GETGLOB 14
EQUAL
PUSHCONT {
	;; transfer()
	;; push identifier send_gas_to
	PUSH S3
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
PUSHCONT {
	;; Remote call IUpgradableByRequest.upgrade
	;; get member sender
	GETGLOB 9
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x64a578c8
	;; code
	;; push identifier account_code
	GETGLOB 13
	STREFR
	;; new_version
	;; push identifier account_version
	GETGLOB 14
	STUR 32
	;; send_gas_to
	;; push identifier send_gas_to
	PUSH S4
	STSLICER
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
IFELSE
;; end if
; end function requestUpgradeAccount
DROP
DROP
; end modifier onlyAccount
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro forceUpgradeAccount
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: account_owner
;; param: send_gas_to
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function forceUpgradeAccount
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 5000000000
GEQ
THROWIFNOT 103
PUSHINT 1000000000
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; Remote call IUpgradableByRequest.upgrade
PUSHINT 1
;; push identifier account_owner
PUSH S2
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x64a578c8
;; code
;; push identifier account_code
GETGLOB 13
STREFR
;; new_version
;; push identifier account_version
GETGLOB 14
STUR 32
;; send_gas_to
;; push identifier send_gas_to
PUSH S1
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
; end function forceUpgradeAccount
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro upgradePair
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode left_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode right_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: left_root
;; param: right_root
;; param: send_gas_to
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function upgradePair
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 10000000000
GEQ
THROWIFNOT 103
PUSHINT 1000000000
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; Remote call IUpgradableByRequest.upgrade
PUSHINT 2
;; push identifier left_root
PUSH S3
;; push identifier right_root
PUSH S3
;; param: left_root
;; param: right_root
; function _buildPairParams
NEWC
;; decl: builder
;; if
;; get member value
;; push identifier left_root
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
;; >
;; get member value
;; push identifier right_root
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
GREATER
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	PUSH S3
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
}
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	PUSH S3
	STSLICER
	; colValue
	NIP
	; end colValue
}
IFELSE
;; end if
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildPairParams
BLKDROP2 2, 1
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x64a578c8
;; code
;; push identifier pair_code
GETGLOB 15
STREFR
;; new_version
;; push identifier pair_version
GETGLOB 16
STUR 32
;; send_gas_to
;; push identifier send_gas_to
PUSH S1
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
; end function upgradePair
; end modifier onlyOwner
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro resetGas
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode receiver
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: receiver
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function resetGas
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; transfer()
;; push identifier receiver
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function resetGas
; end modifier onlyOwner
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro resetTargetGas
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode target
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode receiver
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: target
;; param: receiver
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function resetTargetGas
PUSHINT 1000000000
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; Remote call IResetGas.resetGas
;; push identifier target
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x06e29f2e
;; receiver
;; push identifier receiver
PUSH S1
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
; end function resetTargetGas
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: new_owner
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 17
SDEQ
THROWIFNOT 100
; function transferOwner
; expValue
; end expValue
;; push identifier new_owner
DUP
; colValue
SETGLOB 18
; end colValue
; end function transferOwner
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro acceptOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function acceptOwner
;; get member sender
GETGLOB 9
;; push identifier pending_owner
GETGLOB 18
SDEQ
THROWIFNOT 102
; expValue
; end expValue
;; push identifier pending_owner
GETGLOB 18
; colValue
SETGLOB 17
; end colValue
;; address.makeAddrStd()
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; expValue
; end expValue
; colValue
SETGLOB 18
; end colValue
; end function acceptOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getExpectedAccountAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: account_owner
; function getExpectedAccountAddress
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
PUSHINT 1
;; push identifier account_owner
PUSH S1
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
; end function getExpectedAccountAddress
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc4c8e8d1
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getExpectedPairAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode left_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode right_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: left_root
;; param: right_root
; function getExpectedPairAddress
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
PUSHINT 2
;; push identifier left_root
PUSH S2
;; push identifier right_root
PUSH S2
;; param: left_root
;; param: right_root
; function _buildPairParams
NEWC
;; decl: builder
;; if
;; get member value
;; push identifier left_root
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
;; >
;; get member value
;; push identifier right_root
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
GREATER
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	PUSH S3
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
}
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	PUSH S3
	STSLICER
	; colValue
	NIP
	; end colValue
}
IFELSE
;; end if
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildPairParams
BLKDROP2 2, 1
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
; end function getExpectedPairAddress
BLKDROP2 2, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xac7cef91
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro deployAccount
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: account_owner
;; param: send_gas_to
; function deployAccount
;; push identifier account_version
GETGLOB 14
NEQINT 0
THROWIFNOT 109
;; push identifier has_platform_code
GETGLOB 12
THROWIFNOT 107
;; get member value
;; push identifier account_owner
PUSH S1
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 111
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 103
PUSHINT 1000000000
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
PUSHINT 1
;; push identifier account_owner
PUSH S2
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 100000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x68b55f3f
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: platform
;; Remote call DexPlatform.setPlatformCode
;; push identifier platform
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x6c2507f0
;; code
;; push identifier platform_code
GETGLOB 11
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call DexPlatform.initialize
;; push identifier platform
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1f8b74a7
;; code
;; push identifier account_code
GETGLOB 13
STREFR
;; version
;; push identifier account_version
GETGLOB 14
STUR 32
;; send_gas_to
;; push identifier send_gas_to
PUSH S2
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function deployAccount
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro deployPair
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode left_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode right_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: left_root
;; param: right_root
;; param: send_gas_to
; function deployPair
;; push identifier account_version
GETGLOB 14
GTINT 0
THROWIFNOT 110
;; push identifier has_platform_code
GETGLOB 12
THROWIFNOT 107
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
PUSHINT 5000000000
GEQ
THROWIFNOT 103
PUSHINT 1000000000
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
PUSHINT 2
;; push identifier left_root
PUSH S3
;; push identifier right_root
PUSH S3
;; param: left_root
;; param: right_root
; function _buildPairParams
NEWC
;; decl: builder
;; if
;; get member value
;; push identifier left_root
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
;; >
;; get member value
;; push identifier right_root
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
GREATER
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	PUSH S3
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
}
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	PUSH S3
	STSLICER
	; colValue
	NIP
	; end colValue
}
IFELSE
;; end if
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildPairParams
BLKDROP2 2, 1
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 11
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 100000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x68b55f3f
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: platform
;; Remote call DexPlatform.setPlatformCode
;; push identifier platform
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x6c2507f0
;; code
;; push identifier platform_code
GETGLOB 11
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call DexPlatform.initialize
;; push identifier platform
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1f8b74a7
;; code
;; push identifier pair_code
GETGLOB 15
STREFR
;; version
;; push identifier pair_version
GETGLOB 16
STUR 32
;; send_gas_to
;; push identifier send_gas_to
PUSH S2
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function deployPair
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 15
GETGLOB 16
GETGLOB 17
GETGLOB 18
REVERSE 10, 0
STU 32
STREF
STI 1
STREF
STU 32
STREF
STU 32
STSLICE
STSLICE
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDU 32
LDREF
LDI 1
LDREF
LDU 32
LDREF
LDU 32
LDMSGADDR
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDU 32
	LDREF
	LDI 1
	LDREF
	LDU 32
	LDREF
	LDU 32
	LDMSGADDR
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _nonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init platform_code
	NEWC
	ENDC
	SETGLOB 11
	; init has_platform_code
	PUSHINT 0
	SETGLOB 12
	; init account_code
	NEWC
	ENDC
	SETGLOB 13
	; init account_version
	PUSHINT 0
	SETGLOB 14
	; init pair_code
	NEWC
	ENDC
	SETGLOB 15
	; init pair_version
	PUSHINT 0
	SETGLOB 16
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 17
	; init pending_owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 18
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro public_function_selector
DUP
PUSHINT 588538914
LEQ
PUSHCONT {
	DUP
	PUSHINT 230920640
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 115515182
		EQUAL
		IFJMPREF {
			CALL $resetGas$
		}
		DUP
		PUSHINT 230920640
		EQUAL
		IFJMPREF {
			CALL $forceUpgradeAccount$
		}
	}
	IFJMP
	DUP
	PUSHINT 453826860
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 388172858
		EQUAL
		IFJMPREF {
			CALL $upgrade$
		}
		DUP
		PUSHINT 453826860
		EQUAL
		IFJMPREF {
			CALL $transferOwner$
		}
	}
	IFJMP
	DUP
	PUSHINT 588538914
	EQUAL
	IFJMPREF {
		CALL $requestUpgradeAccount$
	}
}
IFJMP
DUP
PUSHINT 999058976
LEQ
PUSHCONT {
	DUP
	PUSHINT 720190441
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 719681667
		EQUAL
		IFJMPREF {
			CALL $getPairVersion$
		}
		DUP
		PUSHINT 720190441
		EQUAL
		IFJMPREF {
			CALL $deployAccount$
		}
	}
	IFJMP
	DUP
	PUSHINT 992568900
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 746385297
		EQUAL
		IFJMPREF {
			CALL $getExpectedPairAddress$
		}
		DUP
		PUSHINT 992568900
		EQUAL
		IFJMPREF {
			CALL $getAccountVersion$
		}
	}
	IFJMP
	DUP
	PUSHINT 999058976
	EQUAL
	IFJMPREF {
		CALL $installOrUpdatePairCode$
	}
}
IFJMP
DUP
PUSHINT 1782970727
LEQ
PUSHCONT {
	DUP
	PUSHINT 1196840156
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1154017489
		EQUAL
		IFJMPREF {
			CALL $getExpectedAccountAddress$
		}
		DUP
		PUSHINT 1196840156
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
	}
	IFJMP
	DUP
	PUSHINT 1707282005
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1543215676
		EQUAL
		IFJMPREF {
			CALL $installOrUpdateAccountCode$
		}
		DUP
		PUSHINT 1707282005
		EQUAL
		IFJMPREF {
			CALL $resetTargetGas$
		}
	}
	IFJMP
	DUP
	PUSHINT 1782970727
	EQUAL
	IFJMPREF {
		CALL $deployPair$
	}
}
IFJMP
DUP
PUSHINT 2144984146
LEQ
PUSHCONT {
	DUP
	PUSHINT 1809145905
	EQUAL
	IFJMPREF {
		CALL $acceptOwner$
	}
	DUP
	PUSHINT 1915630326
	EQUAL
	IFJMPREF {
		CALL $upgradePair$
	}
	DUP
	PUSHINT 2144984146
	EQUAL
	IFJMPREF {
		CALL $installPlatformOnce$
	}
}
IFJMP

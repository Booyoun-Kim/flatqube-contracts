.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor DexPair
THROW 100
; end constructor DexPair
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro receive_macro
; function receive
THROW 100
; end function receive
IFREF {
	CALL $c7_to_c4$
}

.macro fallback_macro
; function fallback
THROW 100
; end function fallback
IFREF {
	CALL $c7_to_c4$
}

.macro resetGas
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode receiver
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: receiver
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 101
; function resetGas
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; transfer()
;; push identifier receiver
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function resetGas
; end modifier onlyRoot
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getRoot
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getRoot
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier root
GETGLOB 10
; end function getRoot
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf441a21e
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getTokenRoots
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: left
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: right
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: lp
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getTokenRoots
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier left_root
GETGLOB 14
;; push identifier right_root
GETGLOB 15
;; push identifier lp_root
GETGLOB 17
BLKDROP2 3, 3
; end function getTokenRoots
;; emitting 3 value(s)
PUSH S3
EQINT -1
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x9a3000e4
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVersion
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getVersion
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier current_version
GETGLOB 12
; end function getVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xada94d2f
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVault
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getVault
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier vault
GETGLOB 11
; end function getVault
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbd1bd325
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getFeeParams
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: nominator
PUSHINT 0
;; ret param: denominator
PUSHINT 0
; function getFeeParams
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier fee_nominator
GETGLOB 22
;; push identifier fee_denominator
GETGLOB 23
BLKDROP2 2, 2
; end function getFeeParams
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd8d86626
	PUSH S2
	STUR 16
	PUSH S1
	STUR 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 16
	PUSH S1
	STUR 16
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro isActive
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function isActive
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier active
GETGLOB 16
; end function isActive
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa1adfdea
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STIR 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro expectedDepositLiquidity
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode left_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode right_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode auto_change
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
ENDS
;; param: left_amount
;; param: right_amount
;; param: auto_change
;; ret param: retParam@0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
PUSHINT 0
TUPLE 11
; function expectedDepositLiquidity
PUSHCONT {
	;; if
	;; push identifier lp_supply
	GETGLOB 19
	EQINT 0
	PUSHCONT {
		;; return
		GETGLOB 4
		PUSHINT 0
		SETINDEXQ 2
		FALSE
		SETINDEXQ 1
		PUSHINT 64
		SETINDEXQ 4
		SETGLOB 4
		;; push identifier left_amount
		PUSH S3
		;; push identifier right_amount
		PUSH S3
		PUSHINT 100000000000
		FALSE
		FALSE
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		PUSHINT 0
		TUPLE 11
		NIP
		RET
	}
	PUSHCONT {
		;; return
		GETGLOB 4
		PUSHINT 0
		SETINDEXQ 2
		FALSE
		SETINDEXQ 1
		PUSHINT 64
		SETINDEXQ 4
		SETGLOB 4
		;; push identifier left_amount
		PUSH S3
		;; push identifier right_amount
		PUSH S3
		;; push identifier auto_change
		PUSH S3
		;; param: left_amount
		;; param: right_amount
		;; param: auto_change
		; function _expectedDepositLiquidity
		;; push identifier left_amount
		PUSH S2
		;; push identifier left_balance
		GETGLOB 20
		;; push identifier right_amount
		PUSH S3
		;; push identifier right_balance
		GETGLOB 21
		MULDIV
		UFITS 128
		MIN
		;; decl: step_1_left_deposit
		;; push identifier right_amount
		PUSH S2
		;; push identifier right_balance
		GETGLOB 21
		;; push identifier left_amount
		PUSH S5
		;; push identifier left_balance
		GETGLOB 20
		MULDIV
		UFITS 128
		MIN
		;; decl: step_1_right_deposit
		;; push identifier step_1_right_deposit
		DUP
		;; push identifier lp_supply
		GETGLOB 19
		;; push identifier right_balance
		GETGLOB 21
		MULDIV
		UFITS 128
		;; push identifier step_1_left_deposit
		PUSH S2
		;; push identifier lp_supply
		GETGLOB 19
		;; push identifier left_balance
		GETGLOB 20
		MULDIV
		UFITS 128
		MAX
		;; decl: step_1_lp_reward
		;; push identifier left_amount
		PUSH S5
		;; -
		;; push identifier step_1_left_deposit
		PUSH S3
		SUB
		UFITS 128
		;; decl: current_left_amount
		;; push identifier right_amount
		PUSH S5
		;; -
		;; push identifier step_1_right_deposit
		PUSH S3
		SUB
		UFITS 128
		;; decl: current_right_amount
		;; push identifier left_balance
		GETGLOB 20
		;; +
		;; push identifier step_1_left_deposit
		PUSH S5
		ADD
		UFITS 128
		;; decl: current_left_balance
		;; push identifier right_balance
		GETGLOB 21
		;; +
		;; push identifier step_1_right_deposit
		PUSH S5
		ADD
		UFITS 128
		;; decl: current_right_balance
		;; push identifier lp_supply
		GETGLOB 19
		;; +
		;; push identifier step_1_lp_reward
		PUSH S5
		ADD
		UFITS 128
		;; decl: current_lp_supply
		FALSE
		;; decl: step_2_left_to_right
		FALSE
		;; decl: step_2_right_to_left
		PUSHINT 0
		;; decl: step_2_spent
		PUSHINT 0
		;; decl: step_2_fee
		PUSHINT 0
		;; decl: step_2_received
		PUSHINT 0
		;; decl: step_3_left_deposit
		PUSHINT 0
		;; decl: step_3_right_deposit
		PUSHINT 0
		;; decl: step_3_lp_reward
		;; push identifier fee_denominator
		GETGLOB 23
		;; -
		;; push identifier fee_nominator
		GETGLOB 22
		SUB
		UFITS 16
		;; uint256
		;; decl: fee_d_minus_n
		;; if
		;; push identifier auto_change
		PUSH S17
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier current_right_amount
			PUSH S12
			GTINT 0
		}
		IF
		PUSHCONT {
			; expValue
			; end expValue
			TRUE
			; colValue
			POP S8
			; end colValue
			;; push identifier current_right_balance
			PUSH S10
			;; push identifier fee_d_minus_n
			PUSH S1
			;; +
			;; push identifier fee_denominator
			GETGLOB 23
			ADD
			;; push identifier fee_d_minus_n
			PUSH S2
			MULDIV
			UFITS 256
			;; decl: p
			;; push identifier current_right_amount
			PUSH S13
			;; *
			;; push identifier current_right_balance
			PUSH S12
			MUL
			UFITS 128
			;; push identifier fee_denominator
			GETGLOB 23
			;; push identifier fee_d_minus_n
			PUSH S3
			MULDIV
			UFITS 256
			;; decl: q
			;; push identifier p
			PUSH S1
			;; push identifier q
			PUSH S1
			;; param: p
			;; param: q
			;; ret param: retParam@0
			PUSHINT 0
			; function _solveQuadraticEquationPQ
			PUSHCONT {
				;; push identifier p
				PUSH S2
				;; push identifier p
				PUSH S3
				PUSHINT 4
				MULDIV
				UFITS 256
				;; +
				;; push identifier q
				PUSH S2
				ADD
				;; decl: D
				;; push identifier D
				DUP
				;; param: x
				;; ret param: retParam@0
				PUSHINT 0
				; function _sqrt
				PUSHCONT {
					;; if
					FALSE ; decl return flag
					;; push identifier x
					PUSH S2
					EQINT 0
					PUSHCONT {
						;; return
						PUSHINT 0
						BLKDROP2 1, 2
						SWAP
						DROP
						PUSHINT 4
						RET
					}
					PUSHCONT {
						;; if
						;; push identifier x
						PUSH S2
						;; <=
						PUSHINT 3
						LEQ
						PUSHCONT {
							;; return
							PUSHINT 1
							BLKDROP2 1, 2
							SWAP
							DROP
							PUSHINT 4
							RET
						}
						IFJMP
						;; end if
					}
					IFELSE
					EQINT 4
					IFRET
					;; end if
					;; push identifier x
					PUSH S1
					;; +
					PUSHINT 1
					ADD
					;; /
					PUSHINT 2
					DIV
					;; decl: z
					;; push identifier x
					PUSH S2
					;; decl: y
					; while
					PUSHCONT {
						;; push identifier z
						PUSH S1
						;; <
						;; push identifier y
						PUSH S1
						LESS
					}
					PUSHCONT {
						; expValue
						; end expValue
						;; push identifier z
						PUSH S1
						; colValue
						NIP
						; end colValue
						; expValue
						; end expValue
						;; push identifier x
						PUSH S3
						;; /
						;; push identifier z
						PUSH S2
						DIV
						;; +
						;; push identifier z
						PUSH S2
						ADD
						;; /
						PUSHINT 2
						DIV
						; colValue
						POP S2
						; end colValue
					}
					WHILE
					; end while
					;; return
					;; push identifier y
					DUP
					BLKDROP2 1, 3
					ROTREV
					DROP2
				}
				CALLX
				; end function _sqrt
				NIP
				;; decl: Dsqrt
				;; if
				;; push identifier Dsqrt
				DUP
				;; >
				;; push identifier p
				PUSH S5
				;; /
				PUSHINT 2
				DIV
				GREATER
				PUSHCONT {
					;; return
					;; push identifier Dsqrt
					DUP
					;; -
					;; push identifier p
					PUSH S5
					;; /
					PUSHINT 2
					DIV
					SUB
					UFITS 256
					;; uint128
					UFITS 128
					BLKDROP2 1, 3
					ROTREV
					DROP2
					RET
				}
				PUSHCONT {
					;; return
					;; push identifier p
					PUSH S4
					;; /
					PUSHINT 2
					DIV
					;; -
					;; push identifier Dsqrt
					PUSH S1
					SUB
					UFITS 256
					;; uint128
					UFITS 128
					BLKDROP2 1, 3
					ROTREV
					DROP2
					RET
				}
				CONDSEL
				JMPX
				;; end if
				DROP2
			}
			CALLX
			; end function _solveQuadraticEquationPQ
			BLKDROP2 2, 1
			; expValue
			; end expValue
			; colValue
			POP S9
			; end colValue
			;; push identifier step_2_spent
			PUSH S8
			;; push identifier current_right_balance
			PUSH S13
			;; push identifier current_left_balance
			PUSH S15
			;; param: a_amount
			;; param: a_pool
			;; param: b_pool
			; function _expectedExchange
			;; push identifier a_amount
			PUSH S2
			;; push identifier fee_nominator
			GETGLOB 22
			;; push identifier fee_denominator
			GETGLOB 23
			MULDIV
			UFITS 128
			;; decl: a_fee
			;; push identifier a_pool
			PUSH S2
			;; +
			;; push identifier a_amount
			PUSH S4
			ADD
			UFITS 128
			;; decl: new_a_pool
			;; push identifier a_pool
			PUSH S3
			;; push identifier b_pool
			PUSH S3
			;; push identifier new_a_pool
			PUSH S2
			;; -
			;; push identifier a_fee
			PUSH S4
			SUB
			UFITS 128
			MULDIV
			UFITS 128
			;; decl: new_b_pool
			;; push identifier b_pool
			PUSH S3
			;; -
			;; push identifier new_b_pool
			PUSH S1
			SUB
			UFITS 128
			;; decl: expected_b_amount
			;; return
			;; push identifier expected_b_amount
			DUP
			;; push identifier a_fee
			PUSH S4
			BLKDROP2 4, 2
			; end function _expectedExchange
			BLKDROP2 3, 2
			SWAP
			; expValue
			; end expValue
			; colValue
			POP S8
			; end colValue
			; expValue
			; end expValue
			; colValue
			POP S8
			; end colValue
			; expValue
			; end expValue
			;; push identifier current_right_amount
			PUSH S14
			;; -
			;; push identifier step_2_spent
			PUSH S9
			SUB
			UFITS 128
			; colValue
			POP S15
			; end colValue
			; expValue
			; end expValue
			;; push identifier current_right_balance
			PUSH S12
			;; +
			;; push identifier step_2_spent
			PUSH S9
			ADD
			UFITS 128
			; colValue
			POP S13
			; end colValue
			; expValue
			; end expValue
			;; push identifier current_right_amount
			PUSH S14
			; colValue
			POP S5
			; end colValue
			; expValue
			; end expValue
			;; push identifier step_2_received
			PUSH S6
			; colValue
			POP S6
			; end colValue
			;; push identifier current_right_amount
			PUSH S14
			;; push identifier current_lp_supply
			PUSH S12
			;; push identifier current_right_balance
			PUSH S14
			MULDIV
			UFITS 128
			; expValue
			; end expValue
			; colValue
			POP S4
			; end colValue
			DROP2
		}
		PUSHCONT {
			;; if
			;; push identifier auto_change
			PUSH S17
			;; short-circuiting &&
			DUP
			PUSHCONT {
				DROP
				;; push identifier current_left_amount
				PUSH S13
				GTINT 0
			}
			IF
			PUSHCONT {
				; expValue
				; end expValue
				TRUE
				; colValue
				POP S9
				; end colValue
				;; push identifier current_left_balance
				PUSH S11
				;; push identifier fee_d_minus_n
				PUSH S1
				;; +
				;; push identifier fee_denominator
				GETGLOB 23
				ADD
				;; push identifier fee_d_minus_n
				PUSH S2
				MULDIV
				UFITS 256
				;; decl: p
				;; push identifier current_left_amount
				PUSH S14
				;; *
				;; push identifier current_left_balance
				PUSH S13
				MUL
				UFITS 128
				;; push identifier fee_denominator
				GETGLOB 23
				;; push identifier fee_d_minus_n
				PUSH S3
				MULDIV
				UFITS 256
				;; decl: q
				;; push identifier p
				PUSH S1
				;; push identifier q
				PUSH S1
				;; param: p
				;; param: q
				;; ret param: retParam@0
				PUSHINT 0
				; function _solveQuadraticEquationPQ
				PUSHCONT {
					;; push identifier p
					PUSH S2
					;; push identifier p
					PUSH S3
					PUSHINT 4
					MULDIV
					UFITS 256
					;; +
					;; push identifier q
					PUSH S2
					ADD
					;; decl: D
					;; push identifier D
					DUP
					;; param: x
					;; ret param: retParam@0
					PUSHINT 0
					; function _sqrt
					PUSHCONT {
						;; if
						FALSE ; decl return flag
						;; push identifier x
						PUSH S2
						EQINT 0
						PUSHCONT {
							;; return
							PUSHINT 0
							BLKDROP2 1, 2
							SWAP
							DROP
							PUSHINT 4
							RET
						}
						PUSHCONT {
							;; if
							;; push identifier x
							PUSH S2
							;; <=
							PUSHINT 3
							LEQ
							PUSHCONT {
								;; return
								PUSHINT 1
								BLKDROP2 1, 2
								SWAP
								DROP
								PUSHINT 4
								RET
							}
							IFJMP
							;; end if
						}
						IFELSE
						EQINT 4
						IFRET
						;; end if
						;; push identifier x
						PUSH S1
						;; +
						PUSHINT 1
						ADD
						;; /
						PUSHINT 2
						DIV
						;; decl: z
						;; push identifier x
						PUSH S2
						;; decl: y
						; while
						PUSHCONT {
							;; push identifier z
							PUSH S1
							;; <
							;; push identifier y
							PUSH S1
							LESS
						}
						PUSHCONT {
							; expValue
							; end expValue
							;; push identifier z
							PUSH S1
							; colValue
							NIP
							; end colValue
							; expValue
							; end expValue
							;; push identifier x
							PUSH S3
							;; /
							;; push identifier z
							PUSH S2
							DIV
							;; +
							;; push identifier z
							PUSH S2
							ADD
							;; /
							PUSHINT 2
							DIV
							; colValue
							POP S2
							; end colValue
						}
						WHILE
						; end while
						;; return
						;; push identifier y
						DUP
						BLKDROP2 1, 3
						ROTREV
						DROP2
					}
					CALLX
					; end function _sqrt
					NIP
					;; decl: Dsqrt
					;; if
					;; push identifier Dsqrt
					DUP
					;; >
					;; push identifier p
					PUSH S5
					;; /
					PUSHINT 2
					DIV
					GREATER
					PUSHCONT {
						;; return
						;; push identifier Dsqrt
						DUP
						;; -
						;; push identifier p
						PUSH S5
						;; /
						PUSHINT 2
						DIV
						SUB
						UFITS 256
						;; uint128
						UFITS 128
						BLKDROP2 1, 3
						ROTREV
						DROP2
						RET
					}
					PUSHCONT {
						;; return
						;; push identifier p
						PUSH S4
						;; /
						PUSHINT 2
						DIV
						;; -
						;; push identifier Dsqrt
						PUSH S1
						SUB
						UFITS 256
						;; uint128
						UFITS 128
						BLKDROP2 1, 3
						ROTREV
						DROP2
						RET
					}
					CONDSEL
					JMPX
					;; end if
					DROP2
				}
				CALLX
				; end function _solveQuadraticEquationPQ
				BLKDROP2 2, 1
				; expValue
				; end expValue
				; colValue
				POP S9
				; end colValue
				;; push identifier step_2_spent
				PUSH S8
				;; push identifier current_left_balance
				PUSH S14
				;; push identifier current_right_balance
				PUSH S14
				;; param: a_amount
				;; param: a_pool
				;; param: b_pool
				; function _expectedExchange
				;; push identifier a_amount
				PUSH S2
				;; push identifier fee_nominator
				GETGLOB 22
				;; push identifier fee_denominator
				GETGLOB 23
				MULDIV
				UFITS 128
				;; decl: a_fee
				;; push identifier a_pool
				PUSH S2
				;; +
				;; push identifier a_amount
				PUSH S4
				ADD
				UFITS 128
				;; decl: new_a_pool
				;; push identifier a_pool
				PUSH S3
				;; push identifier b_pool
				PUSH S3
				;; push identifier new_a_pool
				PUSH S2
				;; -
				;; push identifier a_fee
				PUSH S4
				SUB
				UFITS 128
				MULDIV
				UFITS 128
				;; decl: new_b_pool
				;; push identifier b_pool
				PUSH S3
				;; -
				;; push identifier new_b_pool
				PUSH S1
				SUB
				UFITS 128
				;; decl: expected_b_amount
				;; return
				;; push identifier expected_b_amount
				DUP
				;; push identifier a_fee
				PUSH S4
				BLKDROP2 4, 2
				; end function _expectedExchange
				BLKDROP2 3, 2
				SWAP
				; expValue
				; end expValue
				; colValue
				POP S8
				; end colValue
				; expValue
				; end expValue
				; colValue
				POP S8
				; end colValue
				; expValue
				; end expValue
				;; push identifier current_left_amount
				PUSH S15
				;; -
				;; push identifier step_2_spent
				PUSH S9
				SUB
				UFITS 128
				; colValue
				POP S16
				; end colValue
				; expValue
				; end expValue
				;; push identifier current_left_balance
				PUSH S13
				;; +
				;; push identifier step_2_spent
				PUSH S9
				ADD
				UFITS 128
				; colValue
				POP S14
				; end colValue
				; expValue
				; end expValue
				;; push identifier current_left_amount
				PUSH S15
				; colValue
				POP S6
				; end colValue
				; expValue
				; end expValue
				;; push identifier step_2_received
				PUSH S6
				; colValue
				POP S5
				; end colValue
				;; push identifier current_left_amount
				PUSH S15
				;; push identifier current_lp_supply
				PUSH S12
				;; push identifier current_left_balance
				PUSH S15
				MULDIV
				UFITS 128
				; expValue
				; end expValue
				; colValue
				POP S4
				; end colValue
				DROP2
			}
			IF
			;; end if
		}
		IFELSE
		;; end if
		;; return
		;; push identifier step_1_left_deposit
		PUSH S16
		;; push identifier step_1_right_deposit
		PUSH S16
		;; push identifier step_1_lp_reward
		PUSH S16
		;; push identifier step_2_left_to_right
		PUSH S11
		;; push identifier step_2_right_to_left
		PUSH S11
		;; push identifier step_2_spent
		PUSH S11
		;; push identifier step_2_fee
		PUSH S11
		;; push identifier step_2_received
		PUSH S11
		;; push identifier step_3_left_deposit
		PUSH S11
		;; push identifier step_3_right_deposit
		PUSH S11
		;; push identifier step_3_lp_reward
		PUSH S11
		TUPLE 11
		PUSHINT 17
		PUSHINT 1
		BLKSWX
		PUSHINT 17
		DROPX
		; end function _expectedDepositLiquidity
		BLKDROP2 3, 1
		NIP
		RET
	}
	CONDSEL
	JMPX
	;; end if
}
CALLX
; end function expectedDepositLiquidity
BLKDROP2 3, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xd5d19ce5
	PUSH S2
	UNTUPLE 11
	BLKSWAP 1, 11
	PUSH S11
	STUR 128
	PUSH S10
	STUR 128
	PUSH S9
	STUR 128
	PUSH S8
	STIR 1
	PUSH S7
	STIR 1
	PUSH S6
	STUR 128
	PUSH S5
	STUR 128
	PUSH S4
	STUR 128
	PUSH S3
	STUR 128
	NEWC
	PUSH S3
	STUR 128
	PUSH S2
	STUR 128
	BLKDROP2 11, 2
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	UNTUPLE 11
	BLKSWAP 1, 11
	PUSH S11
	STUR 128
	PUSH S10
	STUR 128
	PUSH S9
	STUR 128
	PUSH S8
	STIR 1
	PUSH S7
	STIR 1
	PUSH S6
	STUR 128
	PUSH S5
	STUR 128
	PUSH S4
	STUR 128
	PUSH S3
	STUR 128
	NEWC
	PUSH S3
	STUR 128
	PUSH S2
	STUR 128
	BLKDROP2 11, 2
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro depositLiquidity
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode call_id
LDU 64
; Decode left_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode right_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode auto_change
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: call_id
;; param: left_amount
;; param: right_amount
;; param: auto_change
;; param: account_owner
;; param: 
;; param: send_gas_to
; modifier onlyActive
;; push identifier active
GETGLOB 16
THROWIFNOT 114
; modifier onlyAccount
;; push identifier account_owner
PUSH S2
PUSHINT 1
;; push identifier account_owner
PUSH S1
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 13
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; decl: expected
;; get member sender
GETGLOB 9
;; push identifier expected
PUSH S1
SDEQ
THROWIFNOT 105
; function depositLiquidity
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
PUSHINT 100
;; get member wid
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 2
CALLREF {
	CALL $__gasToTon_macro$
}
;; decl: transferValue
PUSHINT 0
;; decl: lp_tokens_amount
;; if
;; push identifier lp_supply
GETGLOB 19
EQINT 0
PUSHCONT {
	; expValue
	; end expValue
	PUSHINT 100000000000
	; colValue
	NIP
	; end colValue
	; expValue
	; end expValue
	;; push identifier left_amount
	PUSH S9
	; colValue
	SETGLOB 20
	; end colValue
	; expValue
	; end expValue
	;; push identifier right_amount
	PUSH S8
	; colValue
	SETGLOB 21
	; end colValue
	;; emit DepositLiquidity
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x56cf721f
	;; left
	;; push identifier left_amount
	PUSH S10
	STUR 128
	;; right
	;; push identifier right_amount
	PUSH S9
	STUR 128
	;; lp
	;; push identifier lp_tokens_amount
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	;; push identifier left_amount
	PUSH S9
	;; push identifier right_amount
	PUSH S9
	;; push identifier auto_change
	PUSH S9
	;; param: left_amount
	;; param: right_amount
	;; param: auto_change
	; function _expectedDepositLiquidity
	;; push identifier left_amount
	PUSH S2
	;; push identifier left_balance
	GETGLOB 20
	;; push identifier right_amount
	PUSH S3
	;; push identifier right_balance
	GETGLOB 21
	MULDIV
	UFITS 128
	MIN
	;; decl: step_1_left_deposit
	;; push identifier right_amount
	PUSH S2
	;; push identifier right_balance
	GETGLOB 21
	;; push identifier left_amount
	PUSH S5
	;; push identifier left_balance
	GETGLOB 20
	MULDIV
	UFITS 128
	MIN
	;; decl: step_1_right_deposit
	;; push identifier step_1_right_deposit
	DUP
	;; push identifier lp_supply
	GETGLOB 19
	;; push identifier right_balance
	GETGLOB 21
	MULDIV
	UFITS 128
	;; push identifier step_1_left_deposit
	PUSH S2
	;; push identifier lp_supply
	GETGLOB 19
	;; push identifier left_balance
	GETGLOB 20
	MULDIV
	UFITS 128
	MAX
	;; decl: step_1_lp_reward
	;; push identifier left_amount
	PUSH S5
	;; -
	;; push identifier step_1_left_deposit
	PUSH S3
	SUB
	UFITS 128
	;; decl: current_left_amount
	;; push identifier right_amount
	PUSH S5
	;; -
	;; push identifier step_1_right_deposit
	PUSH S3
	SUB
	UFITS 128
	;; decl: current_right_amount
	;; push identifier left_balance
	GETGLOB 20
	;; +
	;; push identifier step_1_left_deposit
	PUSH S5
	ADD
	UFITS 128
	;; decl: current_left_balance
	;; push identifier right_balance
	GETGLOB 21
	;; +
	;; push identifier step_1_right_deposit
	PUSH S5
	ADD
	UFITS 128
	;; decl: current_right_balance
	;; push identifier lp_supply
	GETGLOB 19
	;; +
	;; push identifier step_1_lp_reward
	PUSH S5
	ADD
	UFITS 128
	;; decl: current_lp_supply
	FALSE
	;; decl: step_2_left_to_right
	FALSE
	;; decl: step_2_right_to_left
	PUSHINT 0
	;; decl: step_2_spent
	PUSHINT 0
	;; decl: step_2_fee
	PUSHINT 0
	;; decl: step_2_received
	PUSHINT 0
	;; decl: step_3_left_deposit
	PUSHINT 0
	;; decl: step_3_right_deposit
	PUSHINT 0
	;; decl: step_3_lp_reward
	;; push identifier fee_denominator
	GETGLOB 23
	;; -
	;; push identifier fee_nominator
	GETGLOB 22
	SUB
	UFITS 16
	;; uint256
	;; decl: fee_d_minus_n
	;; if
	;; push identifier auto_change
	PUSH S17
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier current_right_amount
		PUSH S12
		GTINT 0
	}
	IF
	PUSHCONT {
		; expValue
		; end expValue
		TRUE
		; colValue
		POP S8
		; end colValue
		;; push identifier current_right_balance
		PUSH S10
		;; push identifier fee_d_minus_n
		PUSH S1
		;; +
		;; push identifier fee_denominator
		GETGLOB 23
		ADD
		;; push identifier fee_d_minus_n
		PUSH S2
		MULDIV
		UFITS 256
		;; decl: p
		;; push identifier current_right_amount
		PUSH S13
		;; *
		;; push identifier current_right_balance
		PUSH S12
		MUL
		UFITS 128
		;; push identifier fee_denominator
		GETGLOB 23
		;; push identifier fee_d_minus_n
		PUSH S3
		MULDIV
		UFITS 256
		;; decl: q
		;; push identifier p
		PUSH S1
		;; push identifier q
		PUSH S1
		;; param: p
		;; param: q
		;; ret param: retParam@0
		PUSHINT 0
		; function _solveQuadraticEquationPQ
		PUSHCONT {
			;; push identifier p
			PUSH S2
			;; push identifier p
			PUSH S3
			PUSHINT 4
			MULDIV
			UFITS 256
			;; +
			;; push identifier q
			PUSH S2
			ADD
			;; decl: D
			;; push identifier D
			DUP
			;; param: x
			;; ret param: retParam@0
			PUSHINT 0
			; function _sqrt
			PUSHCONT {
				;; if
				FALSE ; decl return flag
				;; push identifier x
				PUSH S2
				EQINT 0
				PUSHCONT {
					;; return
					PUSHINT 0
					BLKDROP2 1, 2
					SWAP
					DROP
					PUSHINT 4
					RET
				}
				PUSHCONT {
					;; if
					;; push identifier x
					PUSH S2
					;; <=
					PUSHINT 3
					LEQ
					PUSHCONT {
						;; return
						PUSHINT 1
						BLKDROP2 1, 2
						SWAP
						DROP
						PUSHINT 4
						RET
					}
					IFJMP
					;; end if
				}
				IFELSE
				EQINT 4
				IFRET
				;; end if
				;; push identifier x
				PUSH S1
				;; +
				PUSHINT 1
				ADD
				;; /
				PUSHINT 2
				DIV
				;; decl: z
				;; push identifier x
				PUSH S2
				;; decl: y
				; while
				PUSHCONT {
					;; push identifier z
					PUSH S1
					;; <
					;; push identifier y
					PUSH S1
					LESS
				}
				PUSHCONT {
					; expValue
					; end expValue
					;; push identifier z
					PUSH S1
					; colValue
					NIP
					; end colValue
					; expValue
					; end expValue
					;; push identifier x
					PUSH S3
					;; /
					;; push identifier z
					PUSH S2
					DIV
					;; +
					;; push identifier z
					PUSH S2
					ADD
					;; /
					PUSHINT 2
					DIV
					; colValue
					POP S2
					; end colValue
				}
				WHILE
				; end while
				;; return
				;; push identifier y
				DUP
				BLKDROP2 1, 3
				ROTREV
				DROP2
			}
			CALLX
			; end function _sqrt
			NIP
			;; decl: Dsqrt
			;; if
			;; push identifier Dsqrt
			DUP
			;; >
			;; push identifier p
			PUSH S5
			;; /
			PUSHINT 2
			DIV
			GREATER
			PUSHCONT {
				;; return
				;; push identifier Dsqrt
				DUP
				;; -
				;; push identifier p
				PUSH S5
				;; /
				PUSHINT 2
				DIV
				SUB
				UFITS 256
				;; uint128
				UFITS 128
				BLKDROP2 1, 3
				ROTREV
				DROP2
				RET
			}
			PUSHCONT {
				;; return
				;; push identifier p
				PUSH S4
				;; /
				PUSHINT 2
				DIV
				;; -
				;; push identifier Dsqrt
				PUSH S1
				SUB
				UFITS 256
				;; uint128
				UFITS 128
				BLKDROP2 1, 3
				ROTREV
				DROP2
				RET
			}
			CONDSEL
			JMPX
			;; end if
			DROP2
		}
		CALLX
		; end function _solveQuadraticEquationPQ
		BLKDROP2 2, 1
		; expValue
		; end expValue
		; colValue
		POP S9
		; end colValue
		;; push identifier step_2_spent
		PUSH S8
		;; push identifier current_right_balance
		PUSH S13
		;; push identifier current_left_balance
		PUSH S15
		;; param: a_amount
		;; param: a_pool
		;; param: b_pool
		; function _expectedExchange
		;; push identifier a_amount
		PUSH S2
		;; push identifier fee_nominator
		GETGLOB 22
		;; push identifier fee_denominator
		GETGLOB 23
		MULDIV
		UFITS 128
		;; decl: a_fee
		;; push identifier a_pool
		PUSH S2
		;; +
		;; push identifier a_amount
		PUSH S4
		ADD
		UFITS 128
		;; decl: new_a_pool
		;; push identifier a_pool
		PUSH S3
		;; push identifier b_pool
		PUSH S3
		;; push identifier new_a_pool
		PUSH S2
		;; -
		;; push identifier a_fee
		PUSH S4
		SUB
		UFITS 128
		MULDIV
		UFITS 128
		;; decl: new_b_pool
		;; push identifier b_pool
		PUSH S3
		;; -
		;; push identifier new_b_pool
		PUSH S1
		SUB
		UFITS 128
		;; decl: expected_b_amount
		;; return
		;; push identifier expected_b_amount
		DUP
		;; push identifier a_fee
		PUSH S4
		BLKDROP2 4, 2
		; end function _expectedExchange
		BLKDROP2 3, 2
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S8
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S8
		; end colValue
		; expValue
		; end expValue
		;; push identifier current_right_amount
		PUSH S14
		;; -
		;; push identifier step_2_spent
		PUSH S9
		SUB
		UFITS 128
		; colValue
		POP S15
		; end colValue
		; expValue
		; end expValue
		;; push identifier current_right_balance
		PUSH S12
		;; +
		;; push identifier step_2_spent
		PUSH S9
		ADD
		UFITS 128
		; colValue
		POP S13
		; end colValue
		; expValue
		; end expValue
		;; push identifier current_right_amount
		PUSH S14
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		;; push identifier step_2_received
		PUSH S6
		; colValue
		POP S6
		; end colValue
		;; push identifier current_right_amount
		PUSH S14
		;; push identifier current_lp_supply
		PUSH S12
		;; push identifier current_right_balance
		PUSH S14
		MULDIV
		UFITS 128
		; expValue
		; end expValue
		; colValue
		POP S4
		; end colValue
		DROP2
	}
	PUSHCONT {
		;; if
		;; push identifier auto_change
		PUSH S17
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier current_left_amount
			PUSH S13
			GTINT 0
		}
		IF
		PUSHCONT {
			; expValue
			; end expValue
			TRUE
			; colValue
			POP S9
			; end colValue
			;; push identifier current_left_balance
			PUSH S11
			;; push identifier fee_d_minus_n
			PUSH S1
			;; +
			;; push identifier fee_denominator
			GETGLOB 23
			ADD
			;; push identifier fee_d_minus_n
			PUSH S2
			MULDIV
			UFITS 256
			;; decl: p
			;; push identifier current_left_amount
			PUSH S14
			;; *
			;; push identifier current_left_balance
			PUSH S13
			MUL
			UFITS 128
			;; push identifier fee_denominator
			GETGLOB 23
			;; push identifier fee_d_minus_n
			PUSH S3
			MULDIV
			UFITS 256
			;; decl: q
			;; push identifier p
			PUSH S1
			;; push identifier q
			PUSH S1
			;; param: p
			;; param: q
			;; ret param: retParam@0
			PUSHINT 0
			; function _solveQuadraticEquationPQ
			PUSHCONT {
				;; push identifier p
				PUSH S2
				;; push identifier p
				PUSH S3
				PUSHINT 4
				MULDIV
				UFITS 256
				;; +
				;; push identifier q
				PUSH S2
				ADD
				;; decl: D
				;; push identifier D
				DUP
				;; param: x
				;; ret param: retParam@0
				PUSHINT 0
				; function _sqrt
				PUSHCONT {
					;; if
					FALSE ; decl return flag
					;; push identifier x
					PUSH S2
					EQINT 0
					PUSHCONT {
						;; return
						PUSHINT 0
						BLKDROP2 1, 2
						SWAP
						DROP
						PUSHINT 4
						RET
					}
					PUSHCONT {
						;; if
						;; push identifier x
						PUSH S2
						;; <=
						PUSHINT 3
						LEQ
						PUSHCONT {
							;; return
							PUSHINT 1
							BLKDROP2 1, 2
							SWAP
							DROP
							PUSHINT 4
							RET
						}
						IFJMP
						;; end if
					}
					IFELSE
					EQINT 4
					IFRET
					;; end if
					;; push identifier x
					PUSH S1
					;; +
					PUSHINT 1
					ADD
					;; /
					PUSHINT 2
					DIV
					;; decl: z
					;; push identifier x
					PUSH S2
					;; decl: y
					; while
					PUSHCONT {
						;; push identifier z
						PUSH S1
						;; <
						;; push identifier y
						PUSH S1
						LESS
					}
					PUSHCONT {
						; expValue
						; end expValue
						;; push identifier z
						PUSH S1
						; colValue
						NIP
						; end colValue
						; expValue
						; end expValue
						;; push identifier x
						PUSH S3
						;; /
						;; push identifier z
						PUSH S2
						DIV
						;; +
						;; push identifier z
						PUSH S2
						ADD
						;; /
						PUSHINT 2
						DIV
						; colValue
						POP S2
						; end colValue
					}
					WHILE
					; end while
					;; return
					;; push identifier y
					DUP
					BLKDROP2 1, 3
					ROTREV
					DROP2
				}
				CALLX
				; end function _sqrt
				NIP
				;; decl: Dsqrt
				;; if
				;; push identifier Dsqrt
				DUP
				;; >
				;; push identifier p
				PUSH S5
				;; /
				PUSHINT 2
				DIV
				GREATER
				PUSHCONT {
					;; return
					;; push identifier Dsqrt
					DUP
					;; -
					;; push identifier p
					PUSH S5
					;; /
					PUSHINT 2
					DIV
					SUB
					UFITS 256
					;; uint128
					UFITS 128
					BLKDROP2 1, 3
					ROTREV
					DROP2
					RET
				}
				PUSHCONT {
					;; return
					;; push identifier p
					PUSH S4
					;; /
					PUSHINT 2
					DIV
					;; -
					;; push identifier Dsqrt
					PUSH S1
					SUB
					UFITS 256
					;; uint128
					UFITS 128
					BLKDROP2 1, 3
					ROTREV
					DROP2
					RET
				}
				CONDSEL
				JMPX
				;; end if
				DROP2
			}
			CALLX
			; end function _solveQuadraticEquationPQ
			BLKDROP2 2, 1
			; expValue
			; end expValue
			; colValue
			POP S9
			; end colValue
			;; push identifier step_2_spent
			PUSH S8
			;; push identifier current_left_balance
			PUSH S14
			;; push identifier current_right_balance
			PUSH S14
			;; param: a_amount
			;; param: a_pool
			;; param: b_pool
			; function _expectedExchange
			;; push identifier a_amount
			PUSH S2
			;; push identifier fee_nominator
			GETGLOB 22
			;; push identifier fee_denominator
			GETGLOB 23
			MULDIV
			UFITS 128
			;; decl: a_fee
			;; push identifier a_pool
			PUSH S2
			;; +
			;; push identifier a_amount
			PUSH S4
			ADD
			UFITS 128
			;; decl: new_a_pool
			;; push identifier a_pool
			PUSH S3
			;; push identifier b_pool
			PUSH S3
			;; push identifier new_a_pool
			PUSH S2
			;; -
			;; push identifier a_fee
			PUSH S4
			SUB
			UFITS 128
			MULDIV
			UFITS 128
			;; decl: new_b_pool
			;; push identifier b_pool
			PUSH S3
			;; -
			;; push identifier new_b_pool
			PUSH S1
			SUB
			UFITS 128
			;; decl: expected_b_amount
			;; return
			;; push identifier expected_b_amount
			DUP
			;; push identifier a_fee
			PUSH S4
			BLKDROP2 4, 2
			; end function _expectedExchange
			BLKDROP2 3, 2
			SWAP
			; expValue
			; end expValue
			; colValue
			POP S8
			; end colValue
			; expValue
			; end expValue
			; colValue
			POP S8
			; end colValue
			; expValue
			; end expValue
			;; push identifier current_left_amount
			PUSH S15
			;; -
			;; push identifier step_2_spent
			PUSH S9
			SUB
			UFITS 128
			; colValue
			POP S16
			; end colValue
			; expValue
			; end expValue
			;; push identifier current_left_balance
			PUSH S13
			;; +
			;; push identifier step_2_spent
			PUSH S9
			ADD
			UFITS 128
			; colValue
			POP S14
			; end colValue
			; expValue
			; end expValue
			;; push identifier current_left_amount
			PUSH S15
			; colValue
			POP S6
			; end colValue
			; expValue
			; end expValue
			;; push identifier step_2_received
			PUSH S6
			; colValue
			POP S5
			; end colValue
			;; push identifier current_left_amount
			PUSH S15
			;; push identifier current_lp_supply
			PUSH S12
			;; push identifier current_left_balance
			PUSH S15
			MULDIV
			UFITS 128
			; expValue
			; end expValue
			; colValue
			POP S4
			; end colValue
			DROP2
		}
		IF
		;; end if
	}
	IFELSE
	;; end if
	;; return
	;; push identifier step_1_left_deposit
	PUSH S16
	;; push identifier step_1_right_deposit
	PUSH S16
	;; push identifier step_1_lp_reward
	PUSH S16
	;; push identifier step_2_left_to_right
	PUSH S11
	;; push identifier step_2_right_to_left
	PUSH S11
	;; push identifier step_2_spent
	PUSH S11
	;; push identifier step_2_fee
	PUSH S11
	;; push identifier step_2_received
	PUSH S11
	;; push identifier step_3_left_deposit
	PUSH S11
	;; push identifier step_3_right_deposit
	PUSH S11
	;; push identifier step_3_lp_reward
	PUSH S11
	TUPLE 11
	PUSHINT 17
	PUSHINT 1
	BLKSWX
	PUSHINT 17
	DROPX
	; end function _expectedDepositLiquidity
	BLKDROP2 3, 1
	;; decl: r
	; expValue
	; end expValue
	;; get member step_1_lp_reward
	;; push identifier r
	DUP
	INDEX 2
	;; +
	;; get member step_3_lp_reward
	;; push identifier r
	PUSH S1
	INDEX 10
	ADD
	UFITS 128
	; colValue
	POP S2
	; end colValue
	;; if
	;; push identifier auto_change
	PUSH S8
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier left_balance
		GETGLOB 20
		;; +
		;; push identifier left_amount
		PUSH S11
		ADD
		UFITS 128
		; colValue
		SETGLOB 20
		; end colValue
		; expValue
		; end expValue
		;; push identifier right_balance
		GETGLOB 21
		;; +
		;; push identifier right_amount
		PUSH S10
		ADD
		UFITS 128
		; colValue
		SETGLOB 21
		; end colValue
	}
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier left_balance
		GETGLOB 20
		;; +
		;; get member step_1_left_deposit
		;; push identifier r
		PUSH S1
		INDEX 0
		ADD
		UFITS 128
		; colValue
		SETGLOB 20
		; end colValue
		; expValue
		; end expValue
		;; push identifier right_balance
		GETGLOB 21
		;; +
		;; get member step_1_right_deposit
		;; push identifier r
		PUSH S1
		INDEX 1
		ADD
		UFITS 128
		; colValue
		SETGLOB 21
		; end colValue
		;; if
		;; get member step_1_left_deposit
		;; push identifier r
		DUP
		INDEX 0
		;; <
		;; push identifier left_amount
		PUSH S11
		LESS
		PUSHCONT {
			;; Remote call IDexAccount.internalPairTransfer
			;; push identifier transferValue
			PUSH S2
			;; get member sender
			GETGLOB 9
			NEWC
			STSLICECONST x62_
			STSLICE
			SWAP
			STGRAMS
			PUSHINT 105
			STZEROES
			STSLICECONST 0
			STSLICECONST 1
			NEWC
			STSLICECONST x629f3a85
			;; amount
			;; push identifier left_amount
			PUSH S12
			;; -
			;; get member step_1_left_deposit
			;; push identifier r
			PUSH S3
			INDEX 0
			SUB
			UFITS 128
			STUR 128
			;; token_root
			;; push identifier left_root
			GETGLOB 14
			STSLICER
			;; sender_left_root
			;; push identifier left_root
			GETGLOB 14
			STSLICER
			NEWC
			;; sender_right_root
			;; push identifier right_root
			GETGLOB 15
			STSLICER
			;; send_gas_to
			;; push identifier send_gas_to
			PUSH S8
			STSLICER
			STBREFR
			STBREFR
			ENDC
			PUSHINT 1
			SENDRAWMSG
		}
		IF
		;; end if
		;; if
		;; get member step_1_right_deposit
		;; push identifier r
		DUP
		INDEX 1
		;; <
		;; push identifier right_amount
		PUSH S10
		LESS
		PUSHCONT {
			;; Remote call IDexAccount.internalPairTransfer
			;; push identifier transferValue
			PUSH S2
			;; get member sender
			GETGLOB 9
			NEWC
			STSLICECONST x62_
			STSLICE
			SWAP
			STGRAMS
			PUSHINT 105
			STZEROES
			STSLICECONST 0
			STSLICECONST 1
			NEWC
			STSLICECONST x629f3a85
			;; amount
			;; push identifier right_amount
			PUSH S11
			;; -
			;; get member step_1_right_deposit
			;; push identifier r
			PUSH S3
			INDEX 1
			SUB
			UFITS 128
			STUR 128
			;; token_root
			;; push identifier right_root
			GETGLOB 15
			STSLICER
			;; sender_left_root
			;; push identifier left_root
			GETGLOB 14
			STSLICER
			NEWC
			;; sender_right_root
			;; push identifier right_root
			GETGLOB 15
			STSLICER
			;; send_gas_to
			;; push identifier send_gas_to
			PUSH S8
			STSLICER
			STBREFR
			STBREFR
			ENDC
			PUSHINT 1
			SENDRAWMSG
		}
		IF
		;; end if
	}
	IFELSE
	;; end if
	;; if
	;; get member step_1_lp_reward
	;; push identifier r
	DUP
	INDEX 2
	GTINT 0
	PUSHCONT {
		;; emit DepositLiquidity
		NEWC
		PUSHSLICE xc0000000000000000000000002_
		STSLICER
		STSLICECONST 0
		STSLICECONST 0
		STSLICECONST x56cf721f
		;; left
		;; get member step_1_left_deposit
		;; push identifier r
		PUSH S1
		INDEX 0
		STUR 128
		;; right
		;; get member step_1_right_deposit
		;; push identifier r
		PUSH S1
		INDEX 1
		STUR 128
		;; lp
		;; get member step_1_lp_reward
		;; push identifier r
		PUSH S1
		INDEX 2
		STUR 128
		ENDC
		PUSHINT 0
		SENDRAWMSG
	}
	IF
	;; end if
	;; if
	;; get member step_2_right_to_left
	;; push identifier r
	DUP
	INDEX 4
	PUSHCONT {
		;; emit ExchangeRightToLeft
		NEWC
		PUSHSLICE xc0000000000000000000000002_
		STSLICER
		STSLICECONST 0
		STSLICECONST 0
		STSLICECONST x1f2c7e24
		;; right
		;; get member step_2_spent
		;; push identifier r
		PUSH S1
		INDEX 5
		STUR 128
		;; fee
		;; get member step_2_fee
		;; push identifier r
		PUSH S1
		INDEX 6
		STUR 128
		;; left
		;; get member step_2_received
		;; push identifier r
		PUSH S1
		INDEX 7
		STUR 128
		ENDC
		PUSHINT 0
		SENDRAWMSG
	}
	PUSHCONT {
		;; if
		;; get member step_2_left_to_right
		;; push identifier r
		DUP
		INDEX 3
		PUSHCONT {
			;; emit ExchangeLeftToRight
			NEWC
			PUSHSLICE xc0000000000000000000000002_
			STSLICER
			STSLICECONST 0
			STSLICECONST 0
			STSLICECONST x2d589b1b
			;; left
			;; get member step_2_spent
			;; push identifier r
			PUSH S1
			INDEX 5
			STUR 128
			;; fee
			;; get member step_2_fee
			;; push identifier r
			PUSH S1
			INDEX 6
			STUR 128
			;; right
			;; get member step_2_received
			;; push identifier r
			PUSH S1
			INDEX 7
			STUR 128
			ENDC
			PUSHINT 0
			SENDRAWMSG
		}
		IF
		;; end if
	}
	IFELSE
	;; end if
	;; if
	;; get member step_3_lp_reward
	;; push identifier r
	DUP
	INDEX 10
	GTINT 0
	PUSHCONT {
		;; emit DepositLiquidity
		NEWC
		PUSHSLICE xc0000000000000000000000002_
		STSLICER
		STSLICECONST 0
		STSLICECONST 0
		STSLICECONST x56cf721f
		;; left
		;; get member step_3_left_deposit
		;; push identifier r
		PUSH S1
		INDEX 8
		STUR 128
		;; right
		;; get member step_3_right_deposit
		;; push identifier r
		PUSH S1
		INDEX 9
		STUR 128
		;; lp
		;; get member step_3_lp_reward
		;; push identifier r
		PUSH S1
		INDEX 10
		STUR 128
		ENDC
		PUSHINT 0
		SENDRAWMSG
	}
	IF
	;; end if
	DROP
}
IFELSE
;; end if
; expValue
; end expValue
;; push identifier lp_supply
GETGLOB 19
;; +
;; push identifier lp_tokens_amount
PUSH S1
ADD
UFITS 128
; colValue
SETGLOB 19
; end colValue
;; Remote call IRootTokenContract.mint
PUSHINT 30
;; get member wid
;; push identifier lp_root
GETGLOB 17
PARSEMSGADDR
INDEX 2
CALLREF {
	CALL $__gasToTon_macro$
}
;; push identifier lp_root
GETGLOB 17
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x723dc4ce
;; tokens
;; push identifier lp_tokens_amount
PUSH S1
STUR 128
;; to
;; push identifier lp_vault_wallet
GETGLOB 18
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDexAccount.internalPairTransfer
;; push identifier transferValue
PUSH S1
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x629f3a85
;; amount
;; push identifier lp_tokens_amount
PUSH S2
STUR 128
;; token_root
;; push identifier lp_root
GETGLOB 17
STSLICER
;; sender_left_root
;; push identifier left_root
GETGLOB 14
STSLICER
NEWC
;; sender_right_root
;; push identifier right_root
GETGLOB 15
STSLICER
;; send_gas_to
;; push identifier send_gas_to
PUSH S7
STSLICER
STBREFR
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDexAccount.successCallback
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x11132606
;; call_id
;; push identifier call_id
PUSH S11
STUR 64
ENDC
PUSHINT 128
SENDRAWMSG
DROP2
; end function depositLiquidity
DROP
DROP
; end modifier onlyAccount
; end modifier onlyActive
BLKDROP 7
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro expectedWithdrawLiquidity
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode lp_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: lp_amount
;; ret param: expected_left_amount
PUSHINT 0
;; ret param: expected_right_amount
PUSHINT 0
; function expectedWithdrawLiquidity
;; push identifier left_balance
GETGLOB 20
;; push identifier lp_amount
PUSH S3
;; push identifier lp_supply
GETGLOB 19
MULDIV
UFITS 128
;; decl: left_back_amount
;; push identifier right_balance
GETGLOB 21
;; push identifier lp_amount
PUSH S4
;; push identifier lp_supply
GETGLOB 19
MULDIV
UFITS 128
;; decl: right_back_amount
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier left_back_amount
PUSH S1
;; push identifier right_back_amount
PUSH S1
BLKDROP2 2, 4
SWAP2
DROP2
; end function expectedWithdrawLiquidity
BLKDROP2 1, 2
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x909f3e11
	PUSH S2
	STUR 128
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 128
	PUSH S1
	STUR 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdrawLiquidity
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode call_id
LDU 64
; Decode lp_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode expected_lp_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: call_id
;; param: lp_amount
;; param: expected_lp_root
;; param: account_owner
;; param: 
;; param: send_gas_to
; modifier onlyActive
;; push identifier active
GETGLOB 16
THROWIFNOT 114
; modifier onlyAccount
;; push identifier account_owner
PUSH S2
PUSHINT 1
;; push identifier account_owner
PUSH S1
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 13
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; decl: expected
;; get member sender
GETGLOB 9
;; push identifier expected
PUSH S1
SDEQ
THROWIFNOT 105
; function withdrawLiquidity
;; push identifier expected_lp_root
PUSH S5
;; push identifier lp_root
GETGLOB 17
SDEQ
THROWIFNOT 113
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; push identifier left_balance
GETGLOB 20
;; push identifier lp_amount
PUSH S7
;; push identifier lp_supply
GETGLOB 19
MULDIV
UFITS 128
;; decl: left_back_amount
;; push identifier right_balance
GETGLOB 21
;; push identifier lp_amount
PUSH S8
;; push identifier lp_supply
GETGLOB 19
MULDIV
UFITS 128
;; decl: right_back_amount
PUSHINT 100
;; get member wid
;; get member sender
GETGLOB 9
PARSEMSGADDR
INDEX 2
CALLREF {
	CALL $__gasToTon_macro$
}
;; decl: transferValue
;; Remote call IDexAccount.internalPairTransfer
;; push identifier transferValue
DUP
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x629f3a85
;; amount
;; push identifier left_back_amount
PUSH S4
STUR 128
;; token_root
;; push identifier left_root
GETGLOB 14
STSLICER
;; sender_left_root
;; push identifier left_root
GETGLOB 14
STSLICER
NEWC
;; sender_right_root
;; push identifier right_root
GETGLOB 15
STSLICER
;; send_gas_to
;; push identifier send_gas_to
PUSH S8
STSLICER
STBREFR
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDexAccount.internalPairTransfer
;; push identifier transferValue
DUP
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x629f3a85
;; amount
;; push identifier right_back_amount
PUSH S3
STUR 128
;; token_root
;; push identifier right_root
GETGLOB 15
STSLICER
;; sender_left_root
;; push identifier left_root
GETGLOB 14
STSLICER
NEWC
;; sender_right_root
;; push identifier right_root
GETGLOB 15
STSLICER
;; send_gas_to
;; push identifier send_gas_to
PUSH S8
STSLICER
STBREFR
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
NEWC
ENDC
;; decl: empty
;; Remote call IBurnableByRootTokenRootContract.proxyBurn
PUSHINT 100
;; get member wid
;; push identifier lp_root
GETGLOB 17
PARSEMSGADDR
INDEX 2
CALLREF {
	CALL $__gasToTon_macro$
}
;; push identifier lp_root
GETGLOB 17
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x1df868a9
;; tokens
;; push identifier lp_amount
PUSH S12
STUR 128
;; sender_address
;; push identifier vault
GETGLOB 11
STSLICER
;; send_gas_to
;; push identifier send_gas_to
PUSH S8
STSLICER
NEWC
;; callback_address
;; address.makeAddrStd()
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
STSLICER
;; callback_payload
;; push identifier empty
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDexAccount.successCallback
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x11132606
;; call_id
;; push identifier call_id
PUSH S12
STUR 64
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 4
; end function withdrawLiquidity
DROP
DROP
; end modifier onlyAccount
; end modifier onlyActive
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro expectedExchange
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode is_left_to_right
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
ENDS
;; param: amount
;; param: is_left_to_right
;; ret param: expected_amount
PUSHINT 0
;; ret param: expected_fee
PUSHINT 0
; function expectedExchange
PUSHCONT {
	;; if
	;; push identifier is_left_to_right
	PUSH S2
	PUSHCONT {
		;; return
		GETGLOB 4
		PUSHINT 0
		SETINDEXQ 2
		FALSE
		SETINDEXQ 1
		PUSHINT 64
		SETINDEXQ 4
		SETGLOB 4
		;; push identifier amount
		PUSH S3
		;; push identifier left_balance
		GETGLOB 20
		;; push identifier right_balance
		GETGLOB 21
		;; param: a_amount
		;; param: a_pool
		;; param: b_pool
		; function _expectedExchange
		;; push identifier a_amount
		PUSH S2
		;; push identifier fee_nominator
		GETGLOB 22
		;; push identifier fee_denominator
		GETGLOB 23
		MULDIV
		UFITS 128
		;; decl: a_fee
		;; push identifier a_pool
		PUSH S2
		;; +
		;; push identifier a_amount
		PUSH S4
		ADD
		UFITS 128
		;; decl: new_a_pool
		;; push identifier a_pool
		PUSH S3
		;; push identifier b_pool
		PUSH S3
		;; push identifier new_a_pool
		PUSH S2
		;; -
		;; push identifier a_fee
		PUSH S4
		SUB
		UFITS 128
		MULDIV
		UFITS 128
		;; decl: new_b_pool
		;; push identifier b_pool
		PUSH S3
		;; -
		;; push identifier new_b_pool
		PUSH S1
		SUB
		UFITS 128
		;; decl: expected_b_amount
		;; return
		;; push identifier expected_b_amount
		DUP
		;; push identifier a_fee
		PUSH S4
		BLKDROP2 4, 2
		; end function _expectedExchange
		BLKDROP2 3, 2
		BLKDROP2 2, 2
		RET
	}
	PUSHCONT {
		;; return
		GETGLOB 4
		PUSHINT 0
		SETINDEXQ 2
		FALSE
		SETINDEXQ 1
		PUSHINT 64
		SETINDEXQ 4
		SETGLOB 4
		;; push identifier amount
		PUSH S3
		;; push identifier right_balance
		GETGLOB 21
		;; push identifier left_balance
		GETGLOB 20
		;; param: a_amount
		;; param: a_pool
		;; param: b_pool
		; function _expectedExchange
		;; push identifier a_amount
		PUSH S2
		;; push identifier fee_nominator
		GETGLOB 22
		;; push identifier fee_denominator
		GETGLOB 23
		MULDIV
		UFITS 128
		;; decl: a_fee
		;; push identifier a_pool
		PUSH S2
		;; +
		;; push identifier a_amount
		PUSH S4
		ADD
		UFITS 128
		;; decl: new_a_pool
		;; push identifier a_pool
		PUSH S3
		;; push identifier b_pool
		PUSH S3
		;; push identifier new_a_pool
		PUSH S2
		;; -
		;; push identifier a_fee
		PUSH S4
		SUB
		UFITS 128
		MULDIV
		UFITS 128
		;; decl: new_b_pool
		;; push identifier b_pool
		PUSH S3
		;; -
		;; push identifier new_b_pool
		PUSH S1
		SUB
		UFITS 128
		;; decl: expected_b_amount
		;; return
		;; push identifier expected_b_amount
		DUP
		;; push identifier a_fee
		PUSH S4
		BLKDROP2 4, 2
		; end function _expectedExchange
		BLKDROP2 3, 2
		BLKDROP2 2, 2
		RET
	}
	CONDSEL
	JMPX
	;; end if
}
CALLX
; end function expectedExchange
BLKDROP2 2, 2
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xb614a297
	PUSH S2
	STUR 128
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 128
	PUSH S1
	STUR 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro exchange
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode call_id
LDU 64
; Decode spent_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode spent_token_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode receive_token_root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expected_amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: call_id
;; param: spent_amount
;; param: spent_token_root
;; param: receive_token_root
;; param: expected_amount
;; param: account_owner
;; param: 
;; param: send_gas_to
; modifier onlyActive
;; push identifier active
GETGLOB 16
THROWIFNOT 114
; modifier onlyAccount
;; push identifier account_owner
PUSH S2
PUSHINT 1
;; push identifier account_owner
PUSH S1
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 13
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; decl: expected
;; get member sender
GETGLOB 9
;; push identifier expected
PUSH S1
SDEQ
THROWIFNOT 105
; function exchange
; end function exchange
DROP
DROP
; end modifier onlyAccount
; end modifier onlyActive
BLKDROP 8
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro checkPair
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode call_id
LDU 64
; Decode account_owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: call_id
;; param: account_owner
;; param: 
;; param: send_gas_to
; modifier onlyAccount
;; push identifier account_owner
PUSH S2
PUSHINT 1
;; push identifier account_owner
PUSH S1
;; param: account_owner
; function _buildAccountParams
NEWC
;; decl: builder
; expValue
DUP
; end expValue
;; push identifier account_owner
PUSH S2
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
NIP
; end function _buildAccountParams
NIP
;; param: type_id
;; param: params
; function _buildInitData
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier params
PUSH S1
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 13
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildInitData
BLKDROP2 2, 1
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; decl: expected
;; get member sender
GETGLOB 9
;; push identifier expected
PUSH S1
SDEQ
THROWIFNOT 105
; function checkPair
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; Remote call IDexAccount.checkPairCallback
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x19eb9bf2
;; original_call_id
;; push identifier call_id
PUSH S7
STUR 64
;; left_root
;; push identifier left_root
GETGLOB 14
STSLICER
;; right_root
;; push identifier right_root
GETGLOB 15
STSLICER
;; lp_root
;; push identifier lp_root
GETGLOB 17
STSLICER
NEWC
;; send_gas_to
;; push identifier send_gas_to
PUSH S5
STSLICER
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
; end function checkPair
DROP
DROP
; end modifier onlyAccount
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro upgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
; Decode new_version
LDU 32
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: code
;; param: new_version
;; param: send_gas_to
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 101
; function upgrade
;; if
;; push identifier current_version
GETGLOB 12
;; ==
;; push identifier new_version
PUSH S2
EQUAL
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; !
	;; push identifier active
	GETGLOB 16
	NOT
}
IFNOT
PUSHCONT {
	PUSHINT 1000000000
	PUSHINT 2
	RAWRESERVE
	;; transfer()
	;; push identifier send_gas_to
	DUP
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
PUSHCONT {
	NEWC
	;; decl: builder
	; expValue
	DUP
	; end expValue
	;; push identifier root
	GETGLOB 10
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier vault
	GETGLOB 11
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier current_version
	GETGLOB 12
	STUR 32
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier new_version
	PUSH S3
	STUR 32
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier send_gas_to
	PUSH S2
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier platform_code
	GETGLOB 13
	STREFR
	; colValue
	NIP
	; end colValue
	NEWC
	;; decl: dataBuilder
	; expValue
	DUP
	; end expValue
	;; push identifier left_root
	GETGLOB 14
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier right_root
	GETGLOB 15
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier lp_root
	GETGLOB 17
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier lp_vault_wallet
	GETGLOB 18
	STSLICER
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier lp_supply
	GETGLOB 19
	STUR 128
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier left_balance
	GETGLOB 20
	STUR 128
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier right_balance
	GETGLOB 21
	STUR 128
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier fee_nominator
	GETGLOB 22
	STUR 16
	; colValue
	NIP
	; end colValue
	; expValue
	DUP
	; end expValue
	;; push identifier fee_denominator
	GETGLOB 23
	STUR 16
	; colValue
	NIP
	; end colValue
	; expValue
	PUSH S1
	; end expValue
	;; push identifier dataBuilder
	PUSH S1
	STBREFR
	; colValue
	POP S2
	; end colValue
	;; push identifier code
	PUSH S4
	SETCODE
	;; push identifier code
	PUSH S4
	CTOS
	BLESS
	POP c3
	;; push identifier builder
	PUSH S1
	ENDC
	CALLREF {
		CALL $:onCodeUpgrade$
	}
	DROP2
}
IFELSE
;; end if
; end function upgrade
; end modifier onlyRoot
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
PUSHINT 1
CALL 1
;; param: upgrade_data
; function onCodeUpgrade
;; push identifier upgrade_data
DUP
CTOS
;; decl: s
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
LDU 32
LDU 32
;; decode address
LDMSGADDR
; colValue
POP S6
; end colValue
BLKSWAP 4, 1
BLKSWAP 4, 1
BLKSWAP 4, 1
BLKSWAP 4, 1
BLKSWAP 4, 1
;; decl: root_
;; decl: vault_
;; decl: old_version
;; decl: new_version
;; decl: send_gas_to
;; if
;; push identifier old_version
PUSH S2
PUSHCONT {
	;; set default state vars
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 11
	PUSHINT 0
	SETGLOB 12
	NEWC
	ENDC
	SETGLOB 13
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	PUSHINT 0
	SETGLOB 16
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 17
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 18
	PUSHINT 0
	SETGLOB 19
	PUSHINT 0
	SETGLOB 20
	PUSHINT 0
	SETGLOB 21
	PUSHINT 0
	SETGLOB 22
	PUSHINT 0
	SETGLOB 23
	;; end set default state vars
}
IFNOT
;; end if
; expValue
; end expValue
;; push identifier root_
PUSH S4
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier vault_
PUSH S3
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
;; push identifier new_version
PUSH S1
; colValue
SETGLOB 12
; end colValue
; expValue
PUSH S5
; end expValue
LDREF
; colValue
POP S7
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 13
; end colValue
; expValue
PUSH S5
; end expValue
LDREFRTOS
SWAP
; colValue
POP S7
; end colValue
;; decl: data
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
; colValue
POP S2
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
; colValue
POP S2
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 15
; end colValue
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; transfer()
;; push identifier send_gas_to
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 7
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro afterInitialize
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: send_gas_to
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 101
; function afterInitialize
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; if
;; get member value
;; push identifier lp_root
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
EQINT 0
PUSHCONT {
	;; Remote call IDexVault.addLiquidityToken
	;; push identifier vault
	GETGLOB 11
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x47aa4332
	;; pair
	MYADDR
	STSLICER
	;; left_root
	;; push identifier left_root
	GETGLOB 14
	STSLICER
	;; right_root
	;; push identifier right_root
	GETGLOB 15
	STSLICER
	NEWC
	;; send_gas_to
	;; push identifier send_gas_to
	PUSH S3
	STSLICER
	STBREFR
	STBREFR
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
PUSHCONT {
	;; transfer()
	;; push identifier send_gas_to
	DUP
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
IFELSE
;; end if
; end function afterInitialize
; end modifier onlyRoot
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro liquidityTokenRootDeployed
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode lp_root_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: lp_root_
;; param: send_gas_to
; modifier onlyVault
;; get member sender
GETGLOB 9
;; push identifier vault
GETGLOB 11
SDEQ
THROWIFNOT 115
; function liquidityTokenRootDeployed
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
; expValue
; end expValue
;; push identifier lp_root_
PUSH S1
; colValue
SETGLOB 17
; end colValue
;; Remote call IRootTokenContract.sendExpectedWalletAddress
PUSHINT 100
;; get member wid
;; push identifier lp_root
GETGLOB 17
PARSEMSGADDR
INDEX 2
CALLREF {
	CALL $__gasToTon_macro$
}
;; push identifier lp_root
GETGLOB 17
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x55b3a9fb
;; wallet_public_key_
PUSHINT 0
STUR 256
;; owner_address_
;; push identifier vault
GETGLOB 11
STSLICER
;; to
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; transfer()
;; push identifier send_gas_to
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function liquidityTokenRootDeployed
; end modifier onlyVault
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro expectedWalletAddressCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode wallet
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode wallet_public_key
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owner_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: wallet
;; param: wallet_public_key
;; param: owner_address
; function expectedWalletAddressCallback
;; get member sender
GETGLOB 9
;; push identifier lp_root
GETGLOB 17
SDEQ
THROWIFNOT 100
;; push identifier wallet_public_key
PUSH S1
EQINT 0
THROWIFNOT 100
;; push identifier owner_address
DUP
;; push identifier vault
GETGLOB 11
SDEQ
THROWIFNOT 100
; expValue
; end expValue
;; push identifier wallet
PUSH S2
; colValue
SETGLOB 18
; end colValue
; end function expectedWalletAddressCallback
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 14
GETGLOB 15
GETGLOB 17
REVERSE 4, 0
STSLICE
STSLICE
STSLICE
NEWC
GETGLOB 18
GETGLOB 19
GETGLOB 20
GETGLOB 21
REVERSE 5, 0
STSLICE
STU 128
STU 128
STU 128
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 16
GETGLOB 22
GETGLOB 23
REVERSE 10, 0
STBREF
STBREF
STSLICE
STSLICE
STU 32
STREF
STI 1
STU 16
STU 16
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
LDMSGADDR
SETGLOB 17
SETGLOB 15
SETGLOB 14
LDREFRTOS
LDMSGADDR
LDU 128
LDU 128
PLDU 128
SETGLOB 21
SETGLOB 20
SETGLOB 19
SETGLOB 18
LDMSGADDR
LDMSGADDR
LDU 32
LDREF
LDI 1
LDU 16
PLDU 16
SETGLOB 23
SETGLOB 22
SETGLOB 16
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	SETGLOB 17
	SETGLOB 15
	SETGLOB 14
	LDREFRTOS
	LDMSGADDR
	LDU 128
	LDU 128
	PLDU 128
	SETGLOB 21
	SETGLOB 20
	SETGLOB 19
	SETGLOB 18
	LDMSGADDR
	LDMSGADDR
	LDU 32
	LDREF
	LDI 1
	LDU 16
	PLDU 16
	SETGLOB 23
	SETGLOB 22
	SETGLOB 16
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init vault
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 11
	; init current_version
	PUSHINT 0
	SETGLOB 12
	; init platform_code
	NEWC
	ENDC
	SETGLOB 13
	; init left_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init right_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	; init active
	PUSHINT 0
	SETGLOB 16
	; init lp_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 17
	; init lp_vault_wallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 18
	; init lp_supply
	PUSHINT 0
	SETGLOB 19
	; init left_balance
	PUSHINT 0
	SETGLOB 20
	; init right_balance
	PUSHINT 0
	SETGLOB 21
	; init fee_nominator
	PUSHINT 0
	SETGLOB 22
	; init fee_denominator
	PUSHINT 0
	SETGLOB 23
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: fee_nominator
	PUSHINT 3
	SETGLOB 22
	;; init state var: fee_denominator
	PUSHINT 1000
	SETGLOB 23
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
DUP        ; isEmpty isEmpty
PUSHCONT {
	DROP    ;
	PUSH S1 ; body
	LDU 32  ; funcId body'
	PUSH S1 ; funcId body' funcId
	EQINT 0 ; funcId body' isZero
	DUP     ; funcId body' isZero isZero
	PUSHCONT {
 		; funcId body' isZero
		BLKDROP2 2, 1; isZero
	}
	IF
}
IFNOT
; [funcId body'] doReceive
PUSHCONT {
	CALL $receive_macro$
}
IFJMP
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro public_function_selector
DUP
PUSHINT 565050858
LEQ
PUSHCONT {
	DUP
	PUSHINT 278871569
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 115515182
		EQUAL
		IFJMPREF {
			CALL $resetGas$
		}
		DUP
		PUSHINT 278871569
		EQUAL
		IFJMPREF {
			CALL $expectedWithdrawLiquidity$
		}
	}
	IFJMP
	DUP
	PUSHINT 439353572
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 292780380
		EQUAL
		IFJMPREF {
			CALL $expectedWalletAddressCallback$
		}
		DUP
		PUSHINT 439353572
		EQUAL
		IFJMPREF {
			CALL $getTokenRoots$
		}
	}
	IFJMP
	DUP
	PUSHINT 565050858
	EQUAL
	IFJMPREF {
		CALL $isActive$
	}
}
IFJMP
DUP
PUSHINT 1125423194
LEQ
PUSHCONT {
	DUP
	PUSHINT 766070063
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 721356139
		EQUAL
		IFJMPREF {
			CALL $afterInitialize$
		}
		DUP
		PUSHINT 766070063
		EQUAL
		IFJMPREF {
			CALL $getVersion$
		}
	}
	IFJMP
	DUP
	PUSHINT 1025233701
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 907322007
		EQUAL
		IFJMPREF {
			CALL $expectedExchange$
		}
		DUP
		PUSHINT 1025233701
		EQUAL
		IFJMPREF {
			CALL $getVault$
		}
	}
	IFJMP
	DUP
	PUSHINT 1125423194
	EQUAL
	IFJMPREF {
		CALL $liquidityTokenRootDeployed$
	}
}
IFJMP
DUP
PUSHINT 1688565960
LEQ
PUSHCONT {
	DUP
	PUSHINT 1439800549
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1417804635
		EQUAL
		IFJMPREF {
			CALL $withdrawLiquidity$
		}
		DUP
		PUSHINT 1439800549
		EQUAL
		IFJMPREF {
			CALL $expectedDepositLiquidity$
		}
	}
	IFJMP
	DUP
	PUSHINT 1490576934
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1477057734
		EQUAL
		IFJMPREF {
			CALL $depositLiquidity$
		}
		DUP
		PUSHINT 1490576934
		EQUAL
		IFJMPREF {
			CALL $getFeeParams$
		}
	}
	IFJMP
	DUP
	PUSHINT 1688565960
	EQUAL
	IFJMPREF {
		CALL $upgrade$
	}
}
IFJMP
DUP
PUSHINT 2066445604
LEQ
PUSHCONT {
	DUP
	PUSHINT 1756716863
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 1789196393
	EQUAL
	IFJMPREF {
		CALL $exchange$
	}
	DUP
	PUSHINT 1950458398
	EQUAL
	IFJMPREF {
		CALL $getRoot$
	}
	DUP
	PUSHINT 2066445604
	EQUAL
	IFJMPREF {
		CALL $checkPair$
	}
}
IFJMP

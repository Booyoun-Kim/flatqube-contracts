.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor NewDexRoot
THROW 100
; end constructor NewDexRoot
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVault
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getVault
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier vault
GETGLOB 19
; end function getVault
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbd1bd325
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: dex_owner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier owner
GETGLOB 18
NIP
; end function getOwner
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe2c3961c
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getPendingOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: dex_pending_owner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getPendingOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier pending_owner
GETGLOB 20
NIP
; end function getPendingOwner
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa9697b62
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getAccountVersion
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getAccountVersion
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier account_version
GETGLOB 14
; end function getAccountVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbb296644
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getPairVersion
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getPairVersion
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier pair_version
GETGLOB 16
; end function getPairVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xaae57883
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setActive
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_active
LDI 1
ENDS
;; param: new_active
; function setActive
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; if
;; push identifier new_active
DUP
;; push identifier has_platform_code
GETGLOB 12
AND
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier vault
	GETGLOB 19
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier account_version
		GETGLOB 14
		GTINT 0
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier pair_version
			GETGLOB 16
			GTINT 0
		}
		IF
	}
	IF
}
IF
PUSHCONT {
	; expValue
	; end expValue
	TRUE
	; colValue
	SETGLOB 17
	; end colValue
}
PUSHCONT {
	; expValue
	; end expValue
	FALSE
	; colValue
	SETGLOB 17
	; end colValue
}
IFELSE
;; end if
;; transfer()
;; push identifier owner
GETGLOB 18
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
; end function setActive
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro isActive
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function isActive
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier active
GETGLOB 17
; end function isActive
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa1adfdea
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STIR 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: data
; function onCodeUpgrade
;; set default state vars
PUSHINT 0
SETGLOB 10
NEWC
ENDC
SETGLOB 11
PUSHINT 0
SETGLOB 12
NEWC
ENDC
SETGLOB 13
PUSHINT 0
SETGLOB 14
NEWC
ENDC
SETGLOB 15
PUSHINT 0
SETGLOB 16
PUSHINT 0
SETGLOB 17
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 18
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 19
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 20
NEWC
ENDC
SETGLOB 21
;; end set default state vars
;; push identifier data
DUP
CTOS
;; decl: s
; expValue
DUP
; end expValue
LDU 32
LDU 32
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
; colValue
POP S6
; end colValue
REVERSE 5, 0
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 19
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 20
; end colValue
; expValue
DUP
; end expValue
LDREF
; colValue
POP S2
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 11
; end colValue
; expValue
DUP
; end expValue
LDREF
; colValue
POP S2
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 13
; end colValue
; expValue
DUP
; end expValue
LDREF
; colValue
POP S2
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
TRUE
; colValue
SETGLOB 12
; end colValue
;; Remote call NewDexRoot.setActive
;; push identifier this
; call function of this
MYADDR
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5aface9c
;; new_active
TRUE
STIR 1
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
PUSHSLICE x4e657720526f6f74
NEWC
STSLICE
ENDC
; colValue
SETGLOB 21
; end colValue
;; transfer()
;; push identifier owner
GETGLOB 18
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro newFunc
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $newFunc_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc113206e
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	newFunc_internal
.type	newFunc_internal, @function
CALL $newFunc_internal_macro$

.macro newFunc_internal_macro
; function newFunc
;; return
;; push identifier newTestField
GETGLOB 21
; end function newFunc

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 20
GETGLOB 21
XCHG s2
STSLICE
STREF
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 15
GETGLOB 16
GETGLOB 17
GETGLOB 18
GETGLOB 19
REVERSE 12, 0
STBREF
STU 32
STREF
STI 1
STREF
STU 32
STREF
STU 32
STI 1
STSLICE
STSLICE
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
PLDREF
SETGLOB 21
SETGLOB 20
LDU 32
LDREF
LDI 1
LDREF
LDU 32
LDREF
LDU 32
LDI 1
LDMSGADDR
SETGLOB 19
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	PLDREF
	SETGLOB 21
	SETGLOB 20
	LDU 32
	LDREF
	LDI 1
	LDREF
	LDU 32
	LDREF
	LDU 32
	LDI 1
	LDMSGADDR
	SETGLOB 19
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _nonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init platform_code
	NEWC
	ENDC
	SETGLOB 11
	; init has_platform_code
	PUSHINT 0
	SETGLOB 12
	; init account_code
	NEWC
	ENDC
	SETGLOB 13
	; init account_version
	PUSHINT 0
	SETGLOB 14
	; init pair_code
	NEWC
	ENDC
	SETGLOB 15
	; init pair_version
	PUSHINT 0
	SETGLOB 16
	; init active
	PUSHINT 0
	SETGLOB 17
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 18
	; init vault
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 19
	; init pending_owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 20
	; init newTestField
	NEWC
	ENDC
	SETGLOB 21
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro platform_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xe6d44df5
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro account_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xe9ecce1d
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro pair_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xbd092577
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 719681667
LEQ
PUSHCONT {
	DUP
	PUSHINT 565050858
	EQUAL
	IFJMPREF {
		CALL $isActive$
	}
	DUP
	PUSHINT 694778722
	EQUAL
	IFJMPREF {
		CALL $getPendingOwner$
	}
	DUP
	PUSHINT 719681667
	EQUAL
	IFJMPREF {
		CALL $getPairVersion$
	}
}
IFJMP
DUP
PUSHINT 1025233701
LEQ
PUSHCONT {
	DUP
	PUSHINT 992568900
	EQUAL
	IFJMPREF {
		CALL $getAccountVersion$
	}
	DUP
	PUSHINT 1024009591
	EQUAL
	IFJMPREF {
		CALL $pair_code$
	}
	DUP
	PUSHINT 1025233701
	EQUAL
	IFJMPREF {
		CALL $getVault$
	}
}
IFJMP
DUP
PUSHINT 1656985116
LEQ
PUSHCONT {
	DUP
	PUSHINT 1091772526
	EQUAL
	IFJMPREF {
		CALL $newFunc$
	}
	DUP
	PUSHINT 1526386332
	EQUAL
	IFJMPREF {
		CALL $setActive$
	}
	DUP
	PUSHINT 1656985116
	EQUAL
	IFJMPREF {
		CALL $getOwner$
	}
}
IFJMP
DUP
PUSHINT 1777126941
LEQ
PUSHCONT {
	DUP
	PUSHINT 1725189621
	EQUAL
	IFJMPREF {
		CALL $platform_code$
	}
	DUP
	PUSHINT 1756716863
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 1777126941
	EQUAL
	IFJMPREF {
		CALL $account_code$
	}
}
IFJMP

.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor TestNewDexPair
THROW 100
; end constructor TestNewDexPair
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getRoot
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: dex_root
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getRoot
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier root
GETGLOB 10
NIP
; end function getRoot
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf441a21e
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getTokenRoots
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: left
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: right
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: lp
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getTokenRoots
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier left_root
GETGLOB 14
;; push identifier right_root
GETGLOB 15
;; push identifier lp_root
GETGLOB 22
BLKDROP2 3, 3
; end function getTokenRoots
;; emitting 3 value(s)
PUSH S3
EQINT -1
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x9a3000e4
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getTokenWallets
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: left
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: right
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: lp
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getTokenWallets
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier left_wallet
GETGLOB 18
;; push identifier right_wallet
GETGLOB 19
;; push identifier lp_wallet
GETGLOB 17
BLKDROP2 3, 3
; end function getTokenWallets
;; emitting 3 value(s)
PUSH S3
EQINT -1
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xedf6d3b3
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVersion
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: version
PUSHINT 0
; function getVersion
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier current_version
GETGLOB 12
NIP
; end function getVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xada94d2f
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVault
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: dex_vault
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getVault
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier vault
GETGLOB 11
NIP
; end function getVault
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbd1bd325
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVaultWallets
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: left
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: right
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getVaultWallets
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier vault_left_wallet
GETGLOB 20
;; push identifier vault_right_wallet
GETGLOB 21
BLKDROP2 2, 2
; end function getVaultWallets
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xe144cd05
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S3
	STSLICER
	PUSH S2
	STSLICER
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getFeeParams
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
;; ret param: numerator
PUSHINT 0
;; ret param: denominator
PUSHINT 0
; function getFeeParams
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier fee_numerator
GETGLOB 26
;; push identifier fee_denominator
GETGLOB 27
BLKDROP2 2, 2
; end function getFeeParams
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd8d86626
	PUSH S2
	STUR 16
	PUSH S1
	STUR 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 16
	PUSH S1
	STUR 16
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro isActive
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function isActive
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier active
GETGLOB 16
; end function isActive
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa1adfdea
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STIR 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getBalances
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getBalances
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier lp_supply
GETGLOB 23
;; push identifier left_balance
GETGLOB 24
;; push identifier right_balance
GETGLOB 25
TUPLE 3
; end function getBalances
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x8016e728
	PUSH S1
	UNTUPLE 3
	BLKSWAP 1, 3
	PUSH S3
	STUR 128
	PUSH S2
	STUR 128
	PUSH S1
	STUR 128
	BLKDROP2 3, 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	UNTUPLE 3
	BLKSWAP 1, 3
	PUSH S3
	STUR 128
	PUSH S2
	STUR 128
	PUSH S1
	STUR 128
	BLKDROP2 3, 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: data
; function onCodeUpgrade
PUSHINT 1000000000
PUSHINT 2
RAWRESERVE
;; set default state vars
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 10
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 11
PUSHINT 0
SETGLOB 12
NEWC
ENDC
SETGLOB 13
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 14
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 15
PUSHINT 0
SETGLOB 16
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 17
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 18
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 19
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 20
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 21
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 22
PUSHINT 0
SETGLOB 23
PUSHINT 0
SETGLOB 24
PUSHINT 0
SETGLOB 25
PUSHINT 0
SETGLOB 26
PUSHINT 0
SETGLOB 27
PUSHINT 0
SETGLOB 28
NEWDICT
SETGLOB 29
NEWDICT
SETGLOB 30
NEWDICT
SETGLOB 31
NEWDICT
PUSHINT 32
SETGLOBVAR
NEWDICT
PUSHINT 33
SETGLOBVAR
NEWC
ENDC
PUSHINT 34
SETGLOBVAR
;; end set default state vars
;; push identifier data
DUP
CTOS
;; decl: s
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; decl: send_gas_to
PUSHINT 0
;; decl: old_version
; expValue
; end expValue
TRUE
; colValue
SETGLOB 16
; end colValue
; expValue
PUSH S2
; end expValue
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
LDU 32
LDU 32
;; decode address
LDMSGADDR
; colValue
POP S8
; end colValue
REVERSE 5, 0
; expValue
; end expValue
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
; colValue
POP S3
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
; colValue
POP S2
; end colValue
; expValue
PUSH S2
; end expValue
LDREF
; colValue
POP S4
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 13
; end colValue
; expValue
PUSH S2
; end expValue
LDREFRTOS
SWAP
; colValue
POP S4
; end colValue
;; decl: tokens_data_slice
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
; colValue
POP S4
; end colValue
XCHG s2
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 22
; end colValue
; expValue
DUP
; end expValue
LDREFRTOS
SWAP
; colValue
POP S2
; end colValue
;; decl: token_balances_data_slice
; expValue
DUP
; end expValue
LDU 128
LDU 128
LDU 128
LDU 16
LDU 16
; colValue
POP S6
; end colValue
REVERSE 5, 0
; expValue
; end expValue
; colValue
SETGLOB 23
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 24
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 25
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 26
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 27
; end colValue
; expValue
PUSH S4
; end expValue
LDREFRTOS
SWAP
; colValue
POP S6
; end colValue
;; decl: pair_wallets_data_slice
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
; colValue
POP S4
; end colValue
XCHG s2
; expValue
; end expValue
; colValue
SETGLOB 17
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 19
; end colValue
; expValue
PUSH S5
; end expValue
LDREFRTOS
SWAP
; colValue
POP S7
; end colValue
;; decl: vault_wallets_data
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
; colValue
POP S3
; end colValue
SWAP
; expValue
; end expValue
; colValue
SETGLOB 20
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 21
; end colValue
; expValue
; end expValue
PUSHSLICE x4e65772050616972
NEWC
STSLICE
ENDC
; colValue
PUSHINT 34
SETGLOBVAR
; end colValue
;; transfer()
;; push identifier send_gas_to
PUSH S5
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 7
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro newFunc
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $newFunc_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc113206e
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	newFunc_internal
.type	newFunc_internal, @function
CALL $newFunc_internal_macro$

.macro newFunc_internal_macro
; function newFunc
;; return
;; push identifier newTestField
PUSHINT 34
GETGLOBVAR
; end function newFunc

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 14
GETGLOB 15
GETGLOB 17
GETGLOB 28
GETGLOB 29
PUSHINT 34
GETGLOBVAR
GETGLOB 30
GETGLOB 31
REVERSE 9, 0
STSLICE
STSLICE
STSLICE
STU 64
STDICT
STREF
STDICT
STDICT
NEWC
GETGLOB 18
GETGLOB 19
GETGLOB 20
PUSHINT 32
GETGLOBVAR
PUSHINT 33
GETGLOBVAR
REVERSE 6, 0
STSLICE
STSLICE
STSLICE
STDICT
STDICT
NEWC
GETGLOB 21
GETGLOB 22
GETGLOB 23
GETGLOB 24
GETGLOB 25
REVERSE 6, 0
STSLICE
STSLICE
STU 128
STU 128
STU 128
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 16
GETGLOB 26
GETGLOB 27
REVERSE 11, 0
STBREF
STBREF
STBREF
STSLICE
STSLICE
STU 32
STREF
STI 1
STU 16
STU 16
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
LDMSGADDR
LDMSGADDR
LDU 64
LDDICT
LDREF
LDDICT
PLDDICT
SETGLOB 31
SETGLOB 30
PUSHINT 34
SETGLOBVAR
SETGLOB 29
SETGLOB 28
SETGLOB 17
SETGLOB 15
SETGLOB 14
LDREFRTOS
LDMSGADDR
LDMSGADDR
LDMSGADDR
LDDICT
PLDDICT
PUSHINT 33
SETGLOBVAR
PUSHINT 32
SETGLOBVAR
SETGLOB 20
SETGLOB 19
SETGLOB 18
LDREFRTOS
LDMSGADDR
LDMSGADDR
LDU 128
LDU 128
PLDU 128
SETGLOB 25
SETGLOB 24
SETGLOB 23
SETGLOB 22
SETGLOB 21
LDMSGADDR
LDMSGADDR
LDU 32
LDREF
LDI 1
LDU 16
PLDU 16
SETGLOB 27
SETGLOB 26
SETGLOB 16
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	LDMSGADDR
	LDU 64
	LDDICT
	LDREF
	LDDICT
	PLDDICT
	SETGLOB 31
	SETGLOB 30
	PUSHINT 34
	SETGLOBVAR
	SETGLOB 29
	SETGLOB 28
	SETGLOB 17
	SETGLOB 15
	SETGLOB 14
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	LDMSGADDR
	LDDICT
	PLDDICT
	PUSHINT 33
	SETGLOBVAR
	PUSHINT 32
	SETGLOBVAR
	SETGLOB 20
	SETGLOB 19
	SETGLOB 18
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	LDU 128
	LDU 128
	PLDU 128
	SETGLOB 25
	SETGLOB 24
	SETGLOB 23
	SETGLOB 22
	SETGLOB 21
	LDMSGADDR
	LDMSGADDR
	LDU 32
	LDREF
	LDI 1
	LDU 16
	PLDU 16
	SETGLOB 27
	SETGLOB 26
	SETGLOB 16
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init vault
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 11
	; init current_version
	PUSHINT 0
	SETGLOB 12
	; init platform_code
	NEWC
	ENDC
	SETGLOB 13
	; init left_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init right_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	; init active
	PUSHINT 0
	SETGLOB 16
	; init lp_wallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 17
	; init left_wallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 18
	; init right_wallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 19
	; init vault_left_wallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 20
	; init vault_right_wallet
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 21
	; init lp_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 22
	; init lp_supply
	PUSHINT 0
	SETGLOB 23
	; init left_balance
	PUSHINT 0
	SETGLOB 24
	; init right_balance
	PUSHINT 0
	SETGLOB 25
	; init fee_numerator
	PUSHINT 0
	SETGLOB 26
	; init fee_denominator
	PUSHINT 0
	SETGLOB 27
	; init _nonce
	PUSHINT 0
	SETGLOB 28
	; init _tmp_operations
	NEWDICT
	SETGLOB 29
	; init _tmp_send_gas_to
	NEWDICT
	SETGLOB 30
	; init _tmp_expected_callback_sender
	NEWDICT
	SETGLOB 31
	; init _tmp_sender_public_key
	NEWDICT
	PUSHINT 32
	SETGLOBVAR
	; init _tmp_sender_address
	NEWDICT
	PUSHINT 33
	SETGLOBVAR
	; init newTestField
	NEWC
	ENDC
	PUSHINT 34
	SETGLOBVAR
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro platform_code
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 13
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe6d44df5
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro lp_wallet
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 17
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc1d83fff
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro left_wallet
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 18
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf49ba38d
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro right_wallet
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 19
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x8509bd7a
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro vault_left_wallet
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 20
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbb4b926a
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro vault_right_wallet
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 21
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xef92bcfb
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro lp_root
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 22
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x8288c85c
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro lp_supply
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 23
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa62d4bdc
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro left_balance
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 24
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe53025de
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro right_balance
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 25
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x971daa54
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 565050858
LEQ
PUSHCONT {
	DUP
	PUSHINT 42518620
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1500968
		EQUAL
		IFJMPREF {
			CALL $getBalances$
		}
		DUP
		PUSHINT 42518620
		EQUAL
		IFJMPREF {
			CALL $lp_root$
		}
	}
	IFJMP
	DUP
	PUSHINT 387820116
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 84524410
		EQUAL
		IFJMPREF {
			CALL $right_wallet$
		}
		DUP
		PUSHINT 387820116
		EQUAL
		IFJMPREF {
			CALL $right_balance$
		}
	}
	IFJMP
	DUP
	PUSHINT 565050858
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 439353572
		EQUAL
		IFJMPREF {
			CALL $getTokenRoots$
		}
		DUP
		PUSHINT 565050858
		EQUAL
		IFJMPREF {
			CALL $isActive$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1104691199
LEQ
PUSHCONT {
	DUP
	PUSHINT 766070063
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 640502748
		EQUAL
		IFJMPREF {
			CALL $lp_supply$
		}
		DUP
		PUSHINT 766070063
		EQUAL
		IFJMPREF {
			CALL $getVersion$
		}
	}
	IFJMP
	DUP
	PUSHINT 1025233701
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 994808426
		EQUAL
		IFJMPREF {
			CALL $vault_left_wallet$
		}
		DUP
		PUSHINT 1025233701
		EQUAL
		IFJMPREF {
			CALL $getVault$
		}
	}
	IFJMP
	DUP
	PUSHINT 1104691199
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1091772526
		EQUAL
		IFJMPREF {
			CALL $newFunc$
		}
		DUP
		PUSHINT 1104691199
		EQUAL
		IFJMPREF {
			CALL $lp_wallet$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1844892595
LEQ
PUSHCONT {
	DUP
	PUSHINT 1631898885
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1490576934
		EQUAL
		IFJMPREF {
			CALL $getFeeParams$
		}
		DUP
		PUSHINT 1631898885
		EQUAL
		IFJMPREF {
			CALL $getVaultWallets$
		}
	}
	IFJMP
	DUP
	PUSHINT 1725189621
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1697654238
		EQUAL
		IFJMPREF {
			CALL $left_balance$
		}
		DUP
		PUSHINT 1725189621
		EQUAL
		IFJMPREF {
			CALL $platform_code$
		}
	}
	IFJMP
	DUP
	PUSHINT 1844892595
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1756716863
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
		DUP
		PUSHINT 1844892595
		EQUAL
		IFJMPREF {
			CALL $getTokenWallets$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1956357005
LEQ
PUSHCONT {
	DUP
	PUSHINT 1871887611
	EQUAL
	IFJMPREF {
		CALL $vault_right_wallet$
	}
	DUP
	PUSHINT 1950458398
	EQUAL
	IFJMPREF {
		CALL $getRoot$
	}
	DUP
	PUSHINT 1956357005
	EQUAL
	IFJMPREF {
		CALL $left_wallet$
	}
}
IFJMP

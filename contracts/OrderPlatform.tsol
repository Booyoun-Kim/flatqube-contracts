pragma ever-solidity >= 0.62.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "./structures/IOrderFeeParams.tsol";

contract OrderPlatform is IOrderFeeParams {
    address static factory;
    address static root;
    address static owner;
    address static spentToken;
    address static receiveToken;
    uint64 static timeTx;
    uint64 static nowTx;
    TvmCell static params;

    constructor(
        uint128 _initialAmount,
        uint128 _expectedAmount,
        uint32 _version,
        OrderFeeParams _fee,
        TvmCell backendPK,
        TvmCell _code
    ) public {
        if (msg.sender.value != 0 && msg.sender == root) {
            initialize(
                _initialAmount,
                _expectedAmount,
                _version,
                _fee,
                backendPK,
                _code
            );
        } else {
            owner.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO,
                bounce: false
            });
        }
    }

    function initialize(
        uint128 _initialAmount,
        uint128 _expectedAmount,
        uint32 _version,
        OrderFeeParams _fee,
        TvmCell backendPK,
        TvmCell code
    ) private {
        TvmCell empty;
        TvmCell data = abi.encode(
            factory,
            root,
            owner,
            spentToken,
            receiveToken,
            timeTx,
            nowTx,
            params,
            _initialAmount,
            _expectedAmount,
            uint32(0),
            _version,
            _fee,
            backendPK,
            empty
        );
        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) private {}
}
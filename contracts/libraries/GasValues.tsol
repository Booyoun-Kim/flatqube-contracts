pragma ever-solidity 0.62.0;

import "../libraries/DexGas.tsol";
import "../libraries/DexPoolTypes.tsol";
import "../deprecated/libraries/EverToTip3Gas.tsol";

import "../structures/IGasValueStructure.tsol";

library GasValues {
    // 0.32 ever
    function getDeployWalletGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEPLOY_EMPTY_WALLET_GRAMS + DexGas.TOKEN_ROOT_COMPENSATION,
            DexGas.DEPLOY_WALLET_EXTRA_GAS
        );
    }

    // 0.1 ever
    function getTransferTokensGas(uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            _deployWalletValue,
            DexGas.TRANSFER_TOKENS_GAS
        );
    }

    // GENERAL

    // 0.2 ever + _deployWalletValue
    function getMintTokensGas(uint128 deployWalletValue) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.TOKEN_ROOT_COMPENSATION + deployWalletValue,
            DexGas.MINT_TOKENS_EXTRA_GAS
        );
    }

    // 0.2 ever
    function getBurnTokensGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            0,
            DexGas.BURN_GAS
        );
    }

    // 0.15 ever
    function getTokenDataGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.TOKEN_ROOT_COMPENSATION,
            DexGas.GET_TOKEN_DATA_EXTRA_GAS
        );
    }

    function getTransferOwnershipGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            0,
            DexGas.TRANSFER_ROOT_OWNERSHIP
        );
    }

    // 1.9 ever
    function getDeployLpTokenGas(uint8 N) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue tokenData = getTokenDataGas();
        IGasValueStructure.GasValue transferOwnership = getTransferOwnershipGas();
        return IGasValueStructure.GasValue(
            DexGas.CREATE_TOKEN_VALUE +
            transferOwnership.fixedValue +
            N * tokenData.fixedValue, // token_symbols

            DexGas.DEPLOY_LP_TOKEN_EXTRA_GAS +
            transferOwnership.dynamicGas +
            N * tokenData.dynamicGas
        );
    }

    // 0.111 fixed + 0.55 dynamic
    function getReferralProgramGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.REFERRER_FEE_DEX_FIXED + DexGas.REFERRAL_REFLAST_FIXED + DexGas.REFERRAL_DEPLOY_EMPTY_WALLET_GRAMS,
            DexGas.REFERRER_FEE_DEX_GAS + DexGas.REFERRAL_REFLAST_GAS + DexGas.REFERRAL_TRANSFER_GAS
        );
    }

    // ROOT

    // 0.3 ever
    function getSetFeeParamsGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_POOL_COMPENSATION,
            DexGas.SET_FEE_PARAMS_EXTRA_GAS
        );
    }

    // 0.3 ever
    function getSetAmplificationCoefficientGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_POOL_COMPENSATION,
            DexGas.SET_AMP_COEFFICIENT_EXTRA_GAS
        );
    }

    // 0.3 ever
    function getSetPoolActiveGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_POOL_COMPENSATION + DexGas.DEX_ROOT_COMPENSATION,
            DexGas.SET_POOL_ACTIVE_EXTRA_GAS
        );
    }

    // 1.89 ever
    function getDeployTokenVaultGas() public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue deployWallet = getDeployWalletGas();
        return IGasValueStructure.GasValue(
            DexGas.VAULT_INITIAL_BALANCE + 2 * deployWallet.fixedValue,
            DexGas.DEPLOY_TOKEN_VAULT_EXTRA_GAS + 2 * deployWallet.dynamicGas
        );
    }

    // 0.35 ever
    function getUpgradeTokenVaultGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_TOKEN_VAULT_COMPENSATION,
            DexGas.UPGRADE_TOKEN_VAULT_EXTRA_GAS
        );
    }

    function getDeployPoolGas(uint8 N) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue deployWallet = getDeployWalletGas();
        IGasValueStructure.GasValue deployLpToken = getDeployLpTokenGas(N);
        IGasValueStructure.GasValue tokenData = getTokenDataGas();
        IGasValueStructure.GasValue deployDexTokenVault = getDeployTokenVaultGas();

        return IGasValueStructure.GasValue(
            DexGas.PAIR_INITIAL_BALANCE +
            deployLpToken.fixedValue +
            N * tokenData.fixedValue + // token_decimals
            (N + 1) * deployDexTokenVault.fixedValue +
            (N + 1) * deployWallet.fixedValue,

            DexGas.DEPLOY_POOL_EXTRA_GAS +
            deployLpToken.dynamicGas +
            2 * N * tokenData.dynamicGas + // token_symbols + token_decimals
            (N + 1) * deployDexTokenVault.dynamicGas +
            (N + 1) * deployWallet.dynamicGas
        );
    }

    // 1.24 ever
    function getUpgradePoolGas() public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue tokenData = getTokenDataGas(); // only for pairs upgrade
        return IGasValueStructure.GasValue(
            DexGas.DEX_POOL_COMPENSATION + DexGas.DEX_ROOT_COMPENSATION + 2 * tokenData.fixedValue,
            DexGas.UPGRADE_POOL_EXTRA_GAS + 2 * tokenData.dynamicGas
        );
    }

    // 1.25 ever
    function getDeployAccountGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.ACCOUNT_INITIAL_BALANCE,
            DexGas.DEPLOY_ACCOUNT_EXTRA_GAS
        );
    }

    // 0.35 ever
    function getUpgradeAccountGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_ACCOUNT_COMPENSATION + DexGas.DEX_ROOT_COMPENSATION,
            DexGas.UPGRADE_ACCOUNT_EXTRA_GAS
        );
    }

    // 0.5 ever
    function getUpgradeRootGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_ROOT_COMPENSATION,
            DexGas.UPGRADE_ROOT_EXTRA_GAS
        );
    }

    // ACCOUNT

    function getDepositToAccountGas() public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue transferTokens = getTransferTokensGas(0);
        return IGasValueStructure.GasValue(
            transferTokens.fixedValue,
            DexGas.DEPOSIT_TO_ACCOUNT_EXTRA_GAS + transferTokens.dynamicGas
        );
    }

    function getAddPoolGas(uint8 N) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue deployWallet = getDeployWalletGas();
        return IGasValueStructure.GasValue(
            (N + 1) * deployWallet.fixedValue, // token_roots + lp_root
            DexGas.ADD_POOL_EXTRA_GAS + (N + 1) * deployWallet.dynamicGas
        );
    }

    function getAccountWithdrawGas(uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue transferTokens = getTransferTokensGas(_deployWalletValue);
        return IGasValueStructure.GasValue(
            DexGas.DEX_TOKEN_VAULT_COMPENSATION + transferTokens.fixedValue,
            DexGas.ACCOUNT_WITHDRAW_EXTRA_GAS + transferTokens.dynamicGas
        );
    }

    // 1.4801
    function getAccountTransferGas(bool willing_to_deploy) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue deployWallet = getDeployWalletGas();
        return IGasValueStructure.GasValue(
            DexGas.DEX_ACCOUNT_COMPENSATION +
            DexGas.OPERATION_CALLBACK +
            (willing_to_deploy ? deployWallet.fixedValue : 0),

            DexGas.ACCOUNT_TRANSFER_EXTRA_GAS +
            (willing_to_deploy ? deployWallet.dynamicGas : 0)
        );
    }

    // 0.7101
    function getAccountExchangeGas() public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue internalPairTransfer = getInternalPairTransferGas();
        return IGasValueStructure.GasValue(
            DexGas.OPERATION_CALLBACK +
            DexGas.DEX_POOL_COMPENSATION +
            2 * internalPairTransfer.fixedValue,

            2 * internalPairTransfer.dynamicGas + // receive_token transfer + beneficiary_fee transfer
            DexGas.ACCOUNT_EXCHANGE_EXTRA_GAS
        );
    }

    function getAccountDepositGas(
        uint8 N,
        address referrer,
        bool autoChange
    ) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue mintToken = getMintTokensGas(DexGas.DEPLOY_EMPTY_WALLET_GRAMS);
        IGasValueStructure.GasValue referralProgram = getReferralProgramGas();
        IGasValueStructure.GasValue internalPairTransfer = getInternalPairTransferGas();

        return IGasValueStructure.GasValue(
            DexGas.DEX_POOL_COMPENSATION +
            DexGas.OPERATION_CALLBACK +
            mintToken.fixedValue +
            (autoChange == false ? internalPairTransfer.fixedValue : 0) +
            (referrer.value != 0 ? N * referralProgram.fixedValue : 0),

            DexGas.ACCOUNT_DEPOSIT_EXTRA_GAS +
            mintToken.dynamicGas +
            (autoChange == false ? internalPairTransfer.dynamicGas : 0) +
            (referrer.value != 0 ? N * referralProgram.dynamicGas : 0)
        );
    }

    function getAccountWithdrawLiquidityGas(uint8 N) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue internalPairTransfer = getInternalPairTransferGas();
        IGasValueStructure.GasValue burnTokens = getBurnTokensGas();
        return IGasValueStructure.GasValue(
            DexGas.OPERATION_CALLBACK +
            DexGas.DEX_POOL_COMPENSATION +
            N * internalPairTransfer.fixedValue +
            burnTokens.fixedValue,

            DexGas.ACCOUNT_WITHDRAW_LP_EXTRA_GAS +
            N * internalPairTransfer.dynamicGas +
            burnTokens.dynamicGas
        );
    }

    // POOL

    // 0.1 ever
    function getInternalPairTransferGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            0,
            DexGas.INTERNAL_PAIR_TRANSFER_GAS
        );
    }

    function getPoolDirectExchangeGas(uint128 _deployWalletValue, address referrer) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue referralProgram = getReferralProgramGas();
        IGasValueStructure.GasValue internalPairTransfer = getInternalPairTransferGas();
        IGasValueStructure.GasValue transferTokens = getTransferTokensGas(_deployWalletValue);
        return IGasValueStructure.GasValue(
            2 * DexGas.OPERATION_CALLBACK +
            internalPairTransfer.fixedValue +
            transferTokens.fixedValue +
            (referrer.value != 0 ? referralProgram.fixedValue : 0),

            internalPairTransfer.dynamicGas + // beneficiary_fee transfer
            transferTokens.dynamicGas +
            DexGas.DIRECT_EXCHANGE_EXTRA_GAS +
            (referrer.value != 0 ? referralProgram.dynamicGas : 0)
        );
    }

    function getPoolDirectDepositGas(uint8 poolType, uint8 N, uint128 _deployWalletValue, address referrer) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue referralProgram = getReferralProgramGas();
        IGasValueStructure.GasValue mintTokens = getMintTokensGas(_deployWalletValue);
        IGasValueStructure.GasValue transferTokens = getTransferTokensGas(0);

        uint128 refPaymentsCount = 0;
        if (referrer.value != 0) {
            if(poolType == DexPoolTypes.CONSTANT_PRODUCT || poolType == DexPoolTypes.STABLE_POOL) {
                refPaymentsCount = 1;
            } else {
                refPaymentsCount = N;
            }
        }

        return IGasValueStructure.GasValue(
            2 * DexGas.OPERATION_CALLBACK +
            transferTokens.fixedValue +
            mintTokens.fixedValue +
            refPaymentsCount * referralProgram.fixedValue,

            DexGas.DIRECT_DEPOSIT_EXTRA_GAS +
            transferTokens.dynamicGas +
            mintTokens.dynamicGas +
            refPaymentsCount * referralProgram.dynamicGas
        );
    }

    function getPoolDirectNoFeeWithdrawGas(uint8 N, uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue tokenVaultTransfer = getTokenVaultTransferGas(_deployWalletValue);
        return IGasValueStructure.GasValue(
            2 * DexGas.OPERATION_CALLBACK +
            N * tokenVaultTransfer.fixedValue,

            DexGas.DIRECT_WITHDRAW_EXTRA_GAS +
            N * tokenVaultTransfer.dynamicGas
        );
}

    function getPoolDirectWithdrawGas(uint8 _numberOfCurrenciesToWithdraw, uint128 _deployWalletValue, address referrer) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue referralProgram = getReferralProgramGas();
        IGasValueStructure.GasValue tokenVaultTransfer = getTokenVaultTransferGas(_deployWalletValue);
        return IGasValueStructure.GasValue(
            2 * DexGas.OPERATION_CALLBACK +
            _numberOfCurrenciesToWithdraw * tokenVaultTransfer.fixedValue +
            (referrer.value != 0 ? _numberOfCurrenciesToWithdraw * referralProgram.fixedValue : 0),

            DexGas.DIRECT_WITHDRAW_EXTRA_GAS +
            _numberOfCurrenciesToWithdraw * tokenVaultTransfer.dynamicGas +
            (referrer.value != 0 ? _numberOfCurrenciesToWithdraw * referralProgram.dynamicGas : 0)
        );
    }

    function getPoolDirectWithdrawOneCoinGas(uint128 _deployWalletValue, address referrer) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue referralProgram = getReferralProgramGas();
        IGasValueStructure.GasValue tokenVaultTransfer = getTokenVaultTransferGas(_deployWalletValue);
        return IGasValueStructure.GasValue(
            2 * DexGas.OPERATION_CALLBACK +
            tokenVaultTransfer.fixedValue +
            (referrer.value != 0 ? referralProgram.fixedValue : 0),

            DexGas.DIRECT_WITHDRAW_EXTRA_GAS +
            tokenVaultTransfer.dynamicGas +
            (referrer.value != 0 ? referralProgram.dynamicGas : 0)
        );
    }

    function getPoolCrossExchangeStepGas(address referrer) public returns(IGasValueStructure.GasValue) {
        IGasValueStructure.GasValue referralProgram = getReferralProgramGas();
        return IGasValueStructure.GasValue(
            2 * DexGas.OPERATION_CALLBACK +
            DexGas.DEX_POOL_COMPENSATION +
            (referrer.value != 0 ? referralProgram.fixedValue : 0),

            DexGas.CROSS_EXCHANGE_STEP_EXTRA_GAS +
            (referrer.value != 0 ? referralProgram.dynamicGas : 0)
        );
    }

    // TOKEN_VAULT

    // 0.35 ever
    function getTokenVaultTransferGas(uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_TOKEN_VAULT_COMPENSATION + _deployWalletValue,
            DexGas.TOKEN_VAULT_TRANSFER_GAS
        );
    }

    // VAULT

    // 0.35 ever
    function getUpgradeVaultGas() public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            DexGas.DEX_VAULT_COMPENSATION,
            DexGas.UPGRADE_VAULT_EXTRA_GAS
        );
    }

    // EVER TO TIP3

    function getEverToTip3ExchangeGas(uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            EverToTip3Gas.WEVER_VAULT_RECEIVE_SAFE_FEE + EverToTip3Gas.MINT_DEPLOY_EMPTY_WALLET_GRAMS + EverToTip3Gas.OPERATION_CALLBACK_BASE + _deployWalletValue,
            EverToTip3Gas.EVER_TIP3_SWAP_FIRST_STEP + EverToTip3Gas.EVER_WEVER_TIP3_LAST_STEP
        );
    }

    function getEverToTip3CrossExchangeGas(uint128 _deployWalletValue, uint32 leaves) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            EverToTip3Gas.WEVER_VAULT_RECEIVE_SAFE_FEE + EverToTip3Gas.MINT_DEPLOY_EMPTY_WALLET_GRAMS + leaves * (EverToTip3Gas.OPERATION_CALLBACK_BASE + _deployWalletValue),
            EverToTip3Gas.EVER_TIP3_CROSS_SWAP_FIRST_STEP + leaves * EverToTip3Gas.EVER_WEVER_TIP3_LAST_STEP
        );
    }

    function getTip3ToEverExchangeGas(uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            _deployWalletValue + EverToTip3Gas.OPERATION_CALLBACK_BASE,
            EverToTip3Gas.EVER_TIP3_SWAP_FIRST_STEP + EverToTip3Gas.EVER_WEVER_TIP3_LAST_STEP
        );
    }

    function getTip3ToEverCrossExchangeGas(uint128 _deployWalletValue, uint32 leaves) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            _deployWalletValue + leaves * EverToTip3Gas.OPERATION_CALLBACK_BASE,
            EverToTip3Gas.EVER_TIP3_CROSS_SWAP_FIRST_STEP + leaves * EverToTip3Gas.EVER_WEVER_TIP3_LAST_STEP
        );
    }

    function getEverWeverToTip3ExchangeGas(uint128 _deployWalletValue) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            EverToTip3Gas.WEVER_VAULT_RECEIVE_SAFE_FEE + EverToTip3Gas.MINT_DEPLOY_EMPTY_WALLET_GRAMS + EverToTip3Gas.OPERATION_CALLBACK_BASE + _deployWalletValue,
            EverToTip3Gas.EVER_TIP3_SWAP_FIRST_STEP + EverToTip3Gas.EVER_WEVER_EXTRA_GAS_FIRST_STEP + EverToTip3Gas.EVER_WEVER_TIP3_LAST_STEP
        );
    }

    function getEverWeverToTip3CrossExchangeGas(uint128 _deployWalletValue, uint32 leaves) public returns(IGasValueStructure.GasValue) {
        return IGasValueStructure.GasValue(
            EverToTip3Gas.WEVER_VAULT_RECEIVE_SAFE_FEE + EverToTip3Gas.MINT_DEPLOY_EMPTY_WALLET_GRAMS + leaves * (EverToTip3Gas.OPERATION_CALLBACK_BASE + _deployWalletValue),
            EverToTip3Gas.EVER_TIP3_CROSS_SWAP_FIRST_STEP + EverToTip3Gas.EVER_WEVER_EXTRA_GAS_FIRST_STEP + leaves * EverToTip3Gas.EVER_WEVER_TIP3_LAST_STEP
        );
    }
}

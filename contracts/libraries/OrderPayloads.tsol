pragma ever-solidity >= 0.62.0;

import "../libraries/OrderStatus.tsol";
import "../libraries/PairPayload.tsol";
import "../libraries/DexOperationTypes.tsol";
import "../libraries/OrderOperationTypes.tsol";
import "../libraries/OrderOperationStatus.tsol";
import "../libraries/DexOperationStatusV2.tsol";

library OrderPayloads {

    function buildOrderPayload(
        uint8 op,
        uint64 callbackId,
        uint128 deployWalletValue,
        address recipient,
        optional(TvmCell) successPayload,
        optional(TvmCell) cancelPayload
    ) public returns(TvmCell) {
        TvmBuilder builder;
        builder.store(op);
        builder.store(callbackId);
        builder.store(deployWalletValue);
        builder.store(recipient);

        if (successPayload.hasValue()) {
            builder.store(successPayload.get());
        }

        if (cancelPayload.hasValue()) {
            builder.store(cancelPayload.get());
        }

        return builder.toCell();
    }

    function buildSwapExchangePayload(
        uint64 _callbackId,
        uint128 _deployWalletValue,
        uint128 _expectedAmount,
        address _owner,
        address _sender,
        address _recipient,
        address _outcoming,
        address _referrer
    ) public returns(TvmCell) {

        TvmBuilder successBuilder;
        successBuilder.store(DexOperationStatusV2.SUCCESS);
        successBuilder.store(_callbackId);
        successBuilder.store(_owner);
        successBuilder.store(_deployWalletValue);

        TvmBuilder cancelBuilder;
        cancelBuilder.store(DexOperationStatusV2.CANCEL);
        cancelBuilder.store(_callbackId);
        cancelBuilder.store(_sender);

        TvmCell pairPayload = PairPayload.buildExchangePayloadV2(
            _callbackId,
            _deployWalletValue,
            _expectedAmount,
            _recipient,
            _outcoming,
            _referrer,
            successBuilder.toCell(),
            cancelBuilder.toCell()
        );

        return pairPayload;
    }

    function buildMatchExchangePayload(
        uint8 op,
        uint64 callbackId,
        address sendGasTo,
        uint128 deployWalletValue,
        uint128 amount,
        uint128 reward
    ) public returns(TvmCell) {
        TvmBuilder builder;
        builder.store(op);
        builder.store(callbackId);
        builder.store(sendGasTo);
        builder.store(deployWalletValue);
        builder.store(amount);
        builder.store(reward);

        return builder.toCell();
    }

    function buildMatchTransferPayload(
        uint8 op,
        uint64 callbackId,
        address sendGasTo
    ) public returns(TvmCell) {
        TvmBuilder builder;
        builder.store(op);
        builder.store(callbackId);
        builder.store(sendGasTo);

        return builder.toCell();
    }

    function decodeOnAcceptTokenTransferData (TvmCell _payload, uint8 state) public returns (
        bool,
        uint8,
        uint64,
        address,
        address,
        uint128,
        uint128,
        uint128
    ){
        TvmSlice payloadSlice = _payload.toSlice();
        if (state == OrderStatus.SwapInProgress && payloadSlice.bits() >= 16) {
            (uint8 payloadOperationType, uint8 _op) = payloadSlice.decode(uint8, uint8);
            if(
                _op == DexOperationTypes.EXCHANGE_V2 && payloadSlice.refs() >= 1 &&
                (
                    payloadOperationType == DexOperationStatusV2.SUCCESS ||
                    payloadOperationType == DexOperationStatusV2.CANCEL
                )
            ){
                payloadSlice = payloadSlice.loadRefAsSlice();
            }
        }

        bool isValid = payloadSlice.bits() >= 200;

        uint8 op;
        uint64 callbackId;
        address sendGasTo;
        address recipient;
        uint128 deployWalletValue;
        uint128 amountForDeal;
        uint128 reward;

        if (isValid) {
            (
                op,
                callbackId
            ) = payloadSlice.decode(uint8, uint64);

            if (
                payloadSlice.bits() >= 128 &&
                (op == OrderOperationTypes.EXCHANGE)
            ){
                deployWalletValue = payloadSlice.decode(uint128);
            }

            if (payloadSlice.bits() >= 267) {
                if (op != OrderOperationTypes.EXCHANGE) {
                    sendGasTo = payloadSlice.decode(address);
                } else {
                    recipient = payloadSlice.decode(address);
                }
            }

            if (payloadSlice.bits() >= 128 &&
            (
                op == OrderOperationTypes.MATCHING_ORDER_EXCHANGE ||
                op == DexOperationStatusV2.SUCCESS
            )
            ){
                deployWalletValue = payloadSlice.decode(uint128);
            }

            if (payloadSlice.bits() >= 256 && op == OrderOperationTypes.MATCHING_ORDER_EXCHANGE) {
                (amountForDeal, reward) = payloadSlice.decode(uint128, uint128);
            }
        }

        return (
            isValid,
            op,
            callbackId,
            recipient,
            sendGasTo,
            deployWalletValue,
            amountForDeal,
            reward
        );
    }

    function decodeOnAcceptTokensTransferPayloads(TvmCell _payload, uint8 op) public returns (
    bool,
    TvmCell,
    bool,
    TvmCell
    ){
        TvmSlice slice = _payload.toSlice();
        uint8 refs = slice.refs();

        bool notifySuccess;
        bool notifyCancel;

        TvmCell successPayload;
        TvmCell cancelPayload;

        if (op != OrderOperationTypes.EXCHANGE || refs == 0) {
            return (notifySuccess, successPayload, notifyCancel, cancelPayload);
        }

        notifySuccess = refs >= 1;
        notifyCancel = refs >= 2;

        if (notifySuccess) { successPayload = slice.loadRef(); }
        if (notifyCancel) { cancelPayload = slice.loadRef(); }

        return (
            notifySuccess,
            successPayload,
            notifyCancel,
            cancelPayload
        );
    }

    function buildSuccessPayload(uint8 op, TvmCell originalPayload, address senderAddress) public returns (TvmCell) {

        TvmBuilder builder;

        builder.store(OrderOperationStatus.SUCCESS);
        builder.store(op);
        builder.store(originalPayload);

        TvmBuilder data;
        data.store(senderAddress);

        builder.store(data.toCell());

        return builder.toCell();
    }

    function buildCancelPayload(uint8 op, TvmCell originalPayload) public returns (TvmCell) {

        TvmBuilder builder;
        builder.store(OrderOperationStatus.CANCEL);
        builder.store(op);
        builder.store(originalPayload);

        return builder.toCell();
    }
}
pragma ever-solidity >= 0.62.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./libraries/OrderGas.tsol";
import "./libraries/OrderErrors.tsol";
import "./libraries/OrderStatus.tsol";
import "./libraries/OrderPayloads.tsol";
import "./libraries/OrderOperationTypes.tsol";

import "./structures/IOrderExchangeResult.tsol";
import "./structures/IOrderSwapResult.tsol";
import "./structures/IOrderStructures.tsol";

import "./interfaces/IOrder.tsol";
import "./interfaces/IOrderEvents.tsol";
import "./interfaces/IOrderCallbacks.tsol";
import "./interfaces/IHasEmergencyMode.tsol";
import "./interfaces/IDexRoot.tsol";

import "./OrderPlatform.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "tip3/contracts/interfaces/ITokenRoot.tsol";
import "tip3/contracts/interfaces/ITokenWallet.tsol";
import "tip3/contracts/interfaces/TIP3TokenWallet.tsol";
import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

contract Order is IAcceptTokensTransferCallback, IOrder, IOrderEvents, IHasEmergencyMode {
	address static factory;
	address static root;
	address static owner;
	address static spentToken;
	address static receiveToken;
	uint64 static timeTx;
	uint64 static nowTx;

	uint128 expectedAmount;
	uint128 initialAmount;

	uint128 currentAmountSpentToken;
	uint128 currentAmountReceiveToken;

	uint256 backPK;
	uint256 backMatchingPK;

	address dexRoot;
	address dexPair;

	address spentWallet;
	address receiveWallet;

	TvmCell orderPlatformCode;

	uint8 state;
	uint64 swapAttempt;

	uint8 prevState;
	uint256 emergencyManager;

	bool autoExchange;
	OrderFeeParams fee;
	address matchingOrder;

	uint32 version;

	constructor(
		uint128 _expectedAmount,
		uint128 _initialAmount,
		uint256 _backPK,
		uint256 _backMatchingPK,
		address _dexRoot,
		OrderFeeParams _fee,
		TvmCell _orderPlatformCode,
		uint32 _version
	) public {
		changeState(OrderStatus.Initialize);
		if (
			msg.sender.value != 0 &&
			msg.sender == root
		) {
			tvm.rawReserve(address(this).balance - msg.value, 0);

			currentAmountReceiveToken = expectedAmount = _expectedAmount;
			currentAmountSpentToken = initialAmount = _initialAmount;
			backPK = _backPK;
			backMatchingPK = _backMatchingPK;
			dexRoot = _dexRoot;
			fee = _fee;
			orderPlatformCode = _orderPlatformCode;
			version = _version;

			IDexRoot(dexRoot).getExpectedPairAddress{
					value: OrderGas.GET_DEX_PAIR,
					flag: MsgFlag.SENDER_PAYS_FEES,
					callback: Order.onBeginData
			}(spentToken, receiveToken);

			ITokenRoot(spentToken).deployWallet{
				value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
				flag: MsgFlag.SENDER_PAYS_FEES,
				callback: Order.onBeginData
			}(address(this), OrderGas.DEPLOY_EMPTY_WALLET_GRAMS);

			ITokenRoot(receiveToken).deployWallet{
				value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
				flag: MsgFlag.SENDER_PAYS_FEES,
				callback: Order.onBeginData
			}(address(this), OrderGas.DEPLOY_EMPTY_WALLET_GRAMS);
		} else {
			msg.sender.transfer(
				0,
				false,
				MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
			);
		}
	}

	modifier onlyFactory() {
		require(
			msg.sender.value != 0 && msg.sender == factory,
			OrderErrors.NOT_FACTORY_LIMIT_ORDER_ROOT
		);
		_;
	}

	modifier onlyOwner() {
		require(
			(msg.sender.value != 0 && msg.sender == owner),
			OrderErrors.NOT_LIMIT_ORDER_OWNER
		);
		_;
	}

	modifier onlyBackend(uint256 _backendPK) {
		require(
			msg.pubkey() == _backendPK,
			OrderErrors.NOT_BACKEND_PUB_KEY
		);
		_;
	}

	modifier onlyEmergencyManager() {
		require(
			emergencyManager != 0 &&
			((msg.sender.value != 0 &&
			msg.sender.value == emergencyManager) ||
			msg.pubkey() == emergencyManager),
			OrderErrors.NOT_EMERGENCY_MANAGER
		);
		_;
	}

	function onTokenWalletReceive(address _wallet) external {}

	function onBeginData(address inAddress) external {
		require(
			msg.sender.value != 0 &&
			(msg.sender == dexRoot ||
			msg.sender == spentToken ||
			msg.sender == receiveToken),
			OrderErrors.NOT_BEGIN_DATA
		);

		if (msg.sender == dexRoot) {
			dexPair = inAddress;
			autoExchange = true;
		} else if (msg.sender == spentToken) {
			spentWallet = inAddress;
		} else if (msg.sender == receiveToken) {
			receiveWallet = inAddress;
		}

		if (
			spentWallet.value != 0 &&
			receiveWallet.value != 0
		) {
			TIP3TokenWallet(spentWallet).balance{
				value: OrderGas.GET_BALANCE_WALLET,
				flag: MsgFlag.SENDER_PAYS_FEES,
				callback: Order.onBalanceSpentWallet
			}();
		}
	}

	function onBalanceSpentWallet(uint128 _balance) external {
		require(
			msg.sender.value != 0 && msg.sender == spentWallet,
			OrderErrors.NOT_WALLET_TOKEN_1
		);

		if (state != OrderStatus.Active) {
			if (_balance >= initialAmount) {
				changeState(OrderStatus.Active);
			} else {
				changeState(OrderStatus.AwaitTokens);
			}
		}
	}

	onBounce(TvmSlice body) external {
		uint32 functionId = body.decode(uint32);

		if (
			functionId == tvm.functionId(Order.matchingCheck) &&
			msg.sender == matchingOrder
		){
			changeState(OrderStatus.Active);
			matchingOrder = address(0);
		}
	}

	function buildPayload(
		uint64 callbackId,
		uint128 deployWalletValue
	) external pure returns (TvmCell) {
		return OrderPayloads.buildOrderPayload(
			OrderOperationTypes.EXCHANGE,
			callbackId,
			deployWalletValue
		);
	}

	function currentStatus() external view responsible override returns (uint8){
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } state;
	}

	function initParams() external view responsible override returns (InitParams){
		return {
				value: 0,
				bounce: false,
				flag: MsgFlag.REMAINING_GAS
		} InitParams(
			factory,
			root,
			owner,
			spentToken,
			receiveToken,
			timeTx,
			nowTx
		);
	}

	function getDetails()
	external
	view
	responsible
	override
	returns (Details)
	{
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } buildDetails();
	}

	function getFeeParams() override external view responsible returns (OrderFeeParams params) {
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (fee);
	}

	function getExpectedSpendAmount(uint128 amount) override external view responsible returns(uint128, uint128) {
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} _expectedSpendAmount(amount);
	}

	function getExpectedSpendAmountOfMatching(uint128 amount) override external view responsible returns(uint128, uint128) {
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} _expectedSpendAmountOfMatching(amount);
	}

	function setFeeParams(OrderFeeParams params) override external onlyFactory {
		tvm.rawReserve(address(this).balance - msg.value, 0);

		fee = params;
		factory.transfer(
			0,
			false,
			MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
		);
	}

	function onAcceptTokensTransfer(
		address /*tokenRoot*/,
		uint128 amount,
		address sender,
		address, /*senderWallet*/
		address originalGasTo,
		TvmCell payload
	) external override {
		require(msg.sender.value != 0);

		(
			bool isPayloadValid,
			uint8 op,
			uint64 callbackId,
			address sendGasTo,
			uint128 deployWalletValue,
			uint128 alienTokenAmount,
			uint128 reward
		) = OrderPayloads.decodeOnAcceptTokenTransferData(payload, state);

		TvmCell emptyPayload;
		uint128 transferAmount;
		uint128 expectedSenderAmount;
		uint128 senderFee;

		bool needCancel = !isPayloadValid;
		if (state == OrderStatus.Filled || state == OrderStatus.Cancelled) {
			needCancel = true;
		}

		if (!needCancel) {
			if (msg.sender == spentWallet) {
				if (
					(sender == root && amount >= initialAmount &&
					(state == OrderStatus.Initialize || state == OrderStatus.AwaitTokens)) ||
					(state == OrderStatus.SwapInProgress && op == OrderOperationTypes.SWAP_CANCEL)
				){
					changeState(OrderStatus.Active);

					if (callbackId > 0 && state == OrderStatus.SwapInProgress && op == OrderOperationTypes.SWAP_CANCEL) {
						IOrderCallbacks(sendGasTo).onOrderSwapCancel{
							value: OrderGas.OPERATION_CALLBACK_BASE,
							flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
							bounce: false
						}(callbackId);
					}
				} else {needCancel = true;}
			} else if (msg.sender == receiveWallet) {
				if (
					(state == OrderStatus.Active && op == OrderOperationTypes.EXCHANGE && msg.value >= OrderGas.FILL_ORDER_MIN_VALUE + deployWalletValue) ||
					(sender == matchingOrder && state == OrderStatus.MatchInProgress)
				){
					if (state != OrderStatus.MatchInProgress) {
						(expectedSenderAmount, senderFee) = _expectedSpendAmount(amount);
					} else {
						expectedSenderAmount = amount;
						senderFee = 0;
					}

					TvmCell payloadForTransfer;
					if (state == OrderStatus.MatchInProgress && op == OrderOperationTypes.MATCHING_ORDER_EXCHANGE) {
						transferMatchingReward(reward, deployWalletValue, sendGasTo);

						payloadForTransfer = OrderPayloads.buildMatchTransferPayload(
							OrderOperationTypes.MATCHING_ORDER_TRANSFER,
							callbackId,
							sendGasTo
						);
					}

					if (expectedSenderAmount >= currentAmountReceiveToken) {
						transferAmount = _fullFilledOrder(
							op,
							expectedSenderAmount,
							senderFee,
							deployWalletValue,
							sender,
							originalGasTo,
							payloadForTransfer,
							sendGasTo
						);
					} else {
						transferAmount = _partFilledOrder(
							op,
							callbackId,
							expectedSenderAmount,
							alienTokenAmount,
							senderFee,
							deployWalletValue,
							sender,
							originalGasTo,
							payloadForTransfer,
							sendGasTo
						);
					}

				} else if (
					state == OrderStatus.SwapInProgress &&
					op == OrderOperationTypes.SWAP_SUCCESS &&
					amount >= currentAmountReceiveToken
				){
					_swapSuccess(
						callbackId,
						amount,
						deployWalletValue,
						sendGasTo
					);
				} else {
					needCancel = true;
				}
			} else {
				needCancel = true;
			}

			if (
				currentAmountReceiveToken == 0 &&
				currentAmountSpentToken == 0
			){
				emit PartExchange(
					spentToken,
					transferAmount,
					receiveToken,
					expectedSenderAmount,
					currentAmountSpentToken,
					currentAmountReceiveToken,
					senderFee
				);

				if (callbackId > 0) {
					IOrderCallbacks(state != OrderStatus.MatchInProgress ? sender : sendGasTo).onOrderStateFilled{
						value: OrderGas.OPERATION_CALLBACK_BASE,
						flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
						bounce: false
					}(
						callbackId,
						owner,
						uint128(0),
						IOrderExchangeResult.OrderExchangeFilledResult(
							receiveToken,
							amount,
							spentToken,
							transferAmount
						)
					);

					IOrderCallbacks(owner).onOrderStateFilled{
						value: OrderGas.OPERATION_CALLBACK_BASE,
						flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
						bounce: false
					}(
						callbackId,
						owner,
						senderFee,
						IOrderExchangeResult.OrderExchangeFilledResult(
							spentToken,
							transferAmount,
							receiveToken,
							amount
						)
					);
				}

				changeState(OrderStatus.Filled);
				owner.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
			} else {
				tvm.rawReserve(address(this).balance - msg.value, 0);
				if (op == OrderOperationTypes.MATCHING_ORDER_TRANSFER) {
					sendGasTo.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
				} else {
					sender.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
				}
			}
		}

		if (needCancel) {
			tvm.rawReserve(address(this).balance - msg.value, 0);

			if (callbackId > 0) {
				IOrderCallbacks(sender).onOrderReject{
					value: OrderGas.OPERATION_CALLBACK_BASE,
					flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
					bounce: false
				}(callbackId);
			}

			ITokenWallet(msg.sender).transfer{
				value: 0,
				flag: MsgFlag.ALL_NOT_RESERVED,
				bounce: false
			}(
				amount,
				sender,
				uint128(0),
				originalGasTo,
				true,
				emptyPayload
			);
		}
	}

	function _fullFilledOrder(
		uint8	_op,
		uint128 _expectedSenderAmount,
		uint128 _senderFee,
		uint128 _deployWalletValue,
		address _sender,
		address _originalGasTo,
		TvmCell payloadForTransfer,
		address _sendGasTo
	) private returns(uint128){
		TvmCell emptyPayload;
		uint128 _transferAmount;

		ITokenWallet(receiveWallet).transfer{
			value: OrderGas.TRANSFER_MIN_VALUE,
			flag: MsgFlag.SENDER_PAYS_FEES,
			bounce: false
		}(
			currentAmountReceiveToken,
			owner,
			uint128(0),
			_originalGasTo,
			true,
			emptyPayload
		);

		if (_senderFee > 0) {
			ITokenWallet(receiveWallet).transfer{
				value : OrderGas.TRANSFER_MIN_VALUE,
				flag : MsgFlag.SENDER_PAYS_FEES,
				bounce : false
			}(
				_senderFee,
				fee.beneficiary,
				uint128(0),
				_originalGasTo,
				true,
				emptyPayload
			);
		}

		if (_op != OrderOperationTypes.MATCHING_ORDER_TRANSFER) {
			if (_expectedSenderAmount > currentAmountReceiveToken) {
				ITokenWallet(receiveWallet).transfer{
					value: OrderGas.TRANSFER_MIN_VALUE,
					flag: MsgFlag.SENDER_PAYS_FEES,
					bounce: false
				}(
					_expectedSenderAmount - currentAmountReceiveToken,
					_sender,
					uint128(0),
					_originalGasTo,
					true,
					emptyPayload
				);
			}

			ITokenWallet(spentWallet).transfer  {
				value: 0,
				flag: MsgFlag.REMAINING_GAS,
				bounce: false
			}(
				currentAmountSpentToken,
				_sender,
				(state != OrderStatus.MatchInProgress ? _deployWalletValue : 0),
				_originalGasTo,
				true,
				(state != OrderStatus.MatchInProgress ? emptyPayload : payloadForTransfer)
			);

			_transferAmount = currentAmountSpentToken;
		} else {
			_sendGasTo.transfer(0, false, MsgFlag.REMAINING_GAS);
		}

		if (state == OrderStatus.MatchInProgress) {
			matchingOrder = address(0);
		}

		currentAmountReceiveToken = 0;
		currentAmountSpentToken = 0;

		return _transferAmount;
	}

	function _partFilledOrder(
		uint8 _op,
		uint64 _callbackId,
		uint128 _expectedSenderAmount,
		uint128 _amountForSend,
		uint128 _senderFee,
		uint128 _deployWalletValue,
		address _sender,
		address _originalGasTo,
		TvmCell payloadForTransfer,
		address _sendGasTo
	) private returns(uint128){
		TvmCell emptyPayload;
		uint128 _transferAmount;

		ITokenWallet(receiveWallet).transfer{
			value: OrderGas.TRANSFER_MIN_VALUE,
			flag: MsgFlag.SENDER_PAYS_FEES,
			bounce: false
		}(
			_expectedSenderAmount,
			owner,
			uint128(0),
			_originalGasTo,
			true,
			emptyPayload
		);

		if (_senderFee > 0) {
			ITokenWallet(receiveWallet).transfer{
				value: OrderGas.TRANSFER_MIN_VALUE,
				flag: MsgFlag.SENDER_PAYS_FEES,
				bounce: false
			}(
				_senderFee,
				fee.beneficiary,
				uint128(0),
				_originalGasTo,
				true,
				emptyPayload
			);
		}

		if (_op != OrderOperationTypes.MATCHING_ORDER_TRANSFER) {
			if (state != OrderStatus.MatchInProgress) {
				_transferAmount = math.muldiv(
					_expectedSenderAmount,
					initialAmount,
					expectedAmount
				);
			} else {
				_transferAmount = _amountForSend;
			}

			if (_transferAmount > 0) {
				ITokenWallet(spentWallet).transfer{
					value: OrderGas.TRANSFER_MIN_VALUE,
					flag: MsgFlag.SENDER_PAYS_FEES,
					bounce: false
				}(
					_transferAmount,
					_sender,
					(state != OrderStatus.MatchInProgress ? _deployWalletValue : uint128(0)),
					_originalGasTo,
					true,
					(state != OrderStatus.MatchInProgress ? emptyPayload : payloadForTransfer)
				);
			}

			currentAmountSpentToken -= _transferAmount;
		}

		currentAmountReceiveToken -= _expectedSenderAmount;

		if (currentAmountSpentToken > 0) {
			emit PartExchange(
				spentToken,
				_transferAmount,
				receiveToken,
				_expectedSenderAmount,
				currentAmountSpentToken,
				currentAmountReceiveToken,
				_senderFee
			);

			if (_callbackId > 0) {
				IOrderCallbacks(state != OrderStatus.MatchInProgress ? _sender : _sendGasTo).onOrderPartExchangeSuccess{
					value: OrderGas.OPERATION_CALLBACK_BASE,
					flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
					bounce: false
				}(
					_callbackId,
					owner,
					uint128(0),
					IOrderExchangeResult.OrderExchangeResult(
						receiveToken,
						_expectedSenderAmount,
						spentToken,
						_transferAmount,
						currentAmountReceiveToken,
						currentAmountSpentToken
					)
				);

				IOrderCallbacks(owner).onOrderPartExchangeSuccess{
					value: OrderGas.OPERATION_CALLBACK_BASE,
					flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
					bounce: false
				}(
					_callbackId,
					owner,
					_senderFee,
					IOrderExchangeResult.OrderExchangeResult(
						spentToken,
						_transferAmount,
						receiveToken,
						_expectedSenderAmount,
						currentAmountSpentToken,
						currentAmountReceiveToken
					)
				);
			}
		}

		if (state == OrderStatus.MatchInProgress) {
			matchingOrder = address(0);
			changeState(OrderStatus.Active);
		}

		return _transferAmount;
	}

	function _swapSuccess(
		uint64 _callbackId,
		uint128 _amount,
		uint128 _deployWalletValue,
		address _sendGasTo
	) private {
		TvmCell emptyPayload;

		// send owner
		ITokenWallet(receiveWallet).transfer{
			value: OrderGas.TRANSFER_MIN_VALUE,
			flag: MsgFlag.SENDER_PAYS_FEES,
			bounce: false
		}(
			currentAmountReceiveToken,
			owner,
			0,
			owner,
			true,
			emptyPayload
		);

		if (_callbackId > 0) {
			IOrderCallbacks(owner).onOrderSwapSuccess{
				value: OrderGas.OPERATION_CALLBACK_BASE,
				flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
				bounce: false
			}(
				_callbackId,
				IOrderSwapResult.OrderSwapResult(
				owner,
				_sendGasTo,
				_amount - currentAmountReceiveToken
			)
			);
		}

		if (_amount - currentAmountReceiveToken > 0) {
			// send the difference swap to initiator
			ITokenWallet(receiveWallet).transfer{
				value: OrderGas.TRANSFER_MIN_VALUE,
				flag: MsgFlag.SENDER_PAYS_FEES,
				bounce: false
			}(
				_amount - currentAmountReceiveToken,
				_sendGasTo,
				_deployWalletValue,
				_sendGasTo,
				true,
				emptyPayload
			);

			if (_callbackId > 0) {
				IOrderCallbacks(_sendGasTo).onOrderSwapSuccess{
					value: OrderGas.OPERATION_CALLBACK_BASE,
					flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
					bounce: false
				}(
					_callbackId,
					IOrderSwapResult.OrderSwapResult(
						owner,
						_sendGasTo,
						_amount - currentAmountReceiveToken
					)
				);
			}
		}

		_sendGasTo.transfer({value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS});

		currentAmountReceiveToken = 0;
		currentAmountSpentToken = 0;
	}

	function cancel(uint64 callbackId) external onlyOwner {
		require(state == OrderStatus.Active ||
				state == OrderStatus.SwapInProgress ||
				state == OrderStatus.MatchInProgress,
				OrderErrors.NOT_ACTIVE_LIMIT_ORDER);

		tvm.accept();
		changeState(OrderStatus.Cancelled);
		if (callbackId > 0) {
			IOrderCallbacks(owner).onOrderStateCancelled{
				value: OrderGas.OPERATION_CALLBACK_BASE,
				flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
				bounce: false
			}(
				callbackId,
				IOrderExchangeResult.OrderExchangeCancelledResult(
					spentToken,
					currentAmountSpentToken
				)
			);
		}

		TvmCell emptyPayload;
		ITokenWallet(spentWallet).transfer{
			value: 0,
			flag: MsgFlag.ALL_NOT_RESERVED,
			bounce: false
		}(
			currentAmountSpentToken,
			owner,
			0,
			owner,
			true,
			emptyPayload
		);
	}

	function backendSwap(uint64 callbackId) external {
		require(msg.pubkey() == backPK, OrderErrors.NOT_BACKEND_PUB_KEY);
		require(state == OrderStatus.Active, OrderErrors.NOT_ACTIVE_LIMIT_ORDER);
		require(autoExchange == true, OrderErrors.NOT_AUTO_EXCHANGE);

		tvm.accept();

		swapAttempt++;
		changeState(OrderStatus.SwapInProgress);

		TvmCell payload = OrderPayloads.buildSwapExchangePayload(
			callbackId,
			0,
			currentAmountReceiveToken,
			owner,
			msg.sender,
			address(0),
			receiveToken,
			address(0)
		);

		ITokenWallet(spentWallet).transfer{
			value: OrderGas.SWAP_BACK_MIN_VALUE,
			flag: MsgFlag.SENDER_PAYS_FEES
		}(
			currentAmountSpentToken,
			dexPair,
			uint128(0),
			address(this),
			true,
			payload
		);
	}

	function swap(uint64 callbackId, uint128 deployWalletValue) external {
		require(state == OrderStatus.Active, OrderErrors.NOT_ACTIVE_LIMIT_ORDER);
		require(autoExchange == true, OrderErrors.NOT_AUTO_EXCHANGE);
		require(msg.value >= OrderGas.SWAP_MIN_VALUE + deployWalletValue, OrderErrors.VALUE_TOO_LOW);

		tvm.rawReserve(address(this).balance - msg.value, 0);

		swapAttempt++;
		changeState(OrderStatus.SwapInProgress);

		TvmCell payload = OrderPayloads.buildSwapExchangePayload(
			callbackId,
			deployWalletValue,
			currentAmountReceiveToken,
			msg.sender,
			msg.sender,
			address(0),
			receiveToken,
			address(0)
		);

		ITokenWallet(spentWallet).transfer{
			value: 0,
			flag: MsgFlag.ALL_NOT_RESERVED
		}(
			currentAmountSpentToken,
			dexPair,
			uint128(0),
			address(this),
			true,
			payload
		);
	}

	function backendMatching(uint64 callbackId, address limitOrder) external {
		require(msg.pubkey() == backMatchingPK, OrderErrors.NOT_BACKEND_PUB_KEY);
		require(state == OrderStatus.Active, OrderErrors.NOT_ACTIVE_LIMIT_ORDER);

		tvm.accept();
		changeState(OrderStatus.MatchInProgress);
		matchingOrder = limitOrder;

		IOrder(limitOrder).matchingCheck{
			value: OrderGas.MATCHING_BACK_MIN_VALUE,
			flag: MsgFlag.SENDER_PAYS_FEES,
			bounce: false
		}(
			callbackId,
			uint128(0),
			buildDetails()
		);
	}

	function matching(
		uint64 callbackId,
		uint128 deployWalletValue,
		address orderRoot,
		address _owner,
		uint64 _timeTx,
		uint64 _nowTx
	) external {
		require(state == OrderStatus.Active, OrderErrors.NOT_ACTIVE_LIMIT_ORDER);
		require(msg.value >= OrderGas.MATCHING_MIN_VALUE + deployWalletValue, OrderErrors.VALUE_TOO_LOW);

		address limitOrder = expectedOrder(
			factory,
			orderRoot,
			_owner,
			receiveToken,
			spentToken,
			_timeTx,
			_nowTx
		);

		tvm.rawReserve(address(this).balance - msg.value, 0);

		changeState(OrderStatus.MatchInProgress);
		matchingOrder = limitOrder;

		IOrder(limitOrder).matchingCheck{
			value: 0,
			flag: MsgFlag.ALL_NOT_RESERVED
		}(
			callbackId,
			deployWalletValue,
			buildDetails()
		);
	}

	function matchingCheck(uint64 callbackId, uint128 deployWalletValue, Details detailsLO) override external {
		require(
			expectedOrder(
				factory,
				detailsLO.root,
				detailsLO.owner,
				receiveToken,
				spentToken,
				detailsLO.timeTx,
				detailsLO.nowTx) == msg.sender,
			OrderErrors.NOT_CORRECT_ORDER_ADDRESS
		);

		tvm.rawReserve(address(this).balance - msg.value, 0);
		matchingOrder = msg.sender;

		uint128 alienAmountSpent;
		uint128 expectedAmountReceive;
		uint128 reward;
		address sendGasTo = detailsLO.msgSender;

		uint128 priceToken = detailsLO.currentAmountSpentToken/detailsLO.currentAmountReceiveToken;
		uint128 alienPriceToken = currentAmountReceiveToken/currentAmountSpentToken;

		if (priceToken >= alienPriceToken) {
			alienAmountSpent = math.min(detailsLO.currentAmountReceiveToken, currentAmountSpentToken);
			expectedAmountReceive = alienAmountSpent * alienPriceToken;
			reward = (alienAmountSpent * priceToken) - expectedAmountReceive;
		}

		if (expectedAmountReceive == 0 || state != OrderStatus.Active) {
			if (callbackId > 0) {
				IOrderCallbacks(sendGasTo).onMatchingCancel{
					value: OrderGas.OPERATION_CALLBACK_BASE,
					flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
					bounce: false
				}(callbackId);
			}

			IOrder(matchingOrder).matchingCancel{
				value: 0,
				flag: MsgFlag.ALL_NOT_RESERVED,
				bounce: false
			}();
		} else {
			changeState(OrderStatus.MatchInProgress);
			currentAmountSpentToken -= alienAmountSpent;


			if (callbackId > 0) {
				IOrderCallbacks(sendGasTo).onMatchingInProgress{
					value: OrderGas.OPERATION_CALLBACK_BASE,
					flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
					bounce: false
				}(
					callbackId,
					IOrderExchangeResult.OrderMatchingInProgress(
						matchingOrder,
						address(this),
						receiveToken,
						spentToken,
						expectedAmountReceive,
						alienAmountSpent,
						reward
					)
				);
			}

			if (sendGasTo == address(0)) {
				sendGasTo = fee.beneficiary;
			}

			ITokenWallet(spentWallet).transfer{
				value: 0,
				flag: MsgFlag.ALL_NOT_RESERVED,
				bounce: false
			}(
				alienAmountSpent,
				matchingOrder,
				uint128(0),
				matchingOrder,
				true,
				OrderPayloads.buildMatchExchangePayload(
					OrderOperationTypes.MATCHING_ORDER_EXCHANGE,
					callbackId, sendGasTo, deployWalletValue,
					expectedAmountReceive, reward
				)
			);
		}
	}

	function matchingCancel() override external {
		require(msg.sender == matchingOrder, OrderErrors.NOT_ORDER_FOR_MATCHING);
		changeState(prevState);
		matchingOrder = address(0);
	}

	function expectedOrderRoot(address tokenRoot) internal view returns(address){
		return address(tvm.hash(buildState(factory, tokenRoot, orderPlatformCode, buildParams())));
	}

	function buildState(address _factory, address token, TvmCell _code, TvmCell params) internal pure returns (TvmCell) {
		return tvm.buildStateInit({
			contr: OrderPlatform,
			varInit: {
				factory: _factory,
				spentToken: token,
				params: params
			},
			pubkey: 0,
			code: _code
		});
	}

	function buildParams() internal view returns (TvmCell) {
		return abi.encode(dexRoot, tvm.code(), orderPlatformCode);
	}

	function expectedOrder(
		address _factory,
		address _root,
		address _owner,
		address _spentToken,
		address _receiveToken,
		uint64 _timeTx,
		uint64 _nowTx
	) internal pure returns(address) {
		return address(tvm.hash(tvm.buildStateInit({
				contr: Order,
				varInit : {
					factory: _factory,
					root: _root,
					owner: _owner,
					spentToken: _spentToken,
					receiveToken: _receiveToken,
					timeTx: _timeTx,
					nowTx: _nowTx
				},
				code: tvm.code()
		})));
	}

	function changeState(uint8 newState) private {
		prevState = state;
		state = newState;
		emit StateChanged(prevState, newState, buildDetails());
	}

	function buildDetails() private view returns (Details) {
		return
		Details(
			factory,
			root,
			owner,
			backPK,
			backMatchingPK,
			dexRoot,
			dexPair,
			msg.sender,
			swapAttempt,
			state,
			spentToken,
			receiveToken,
			spentWallet,
			receiveWallet,
			expectedAmount,
			initialAmount,
			currentAmountSpentToken,
			currentAmountReceiveToken,
			timeTx,
			nowTx,
			matchingOrder,
			version
		);
	}

	function _expectedSpendAmount(uint128 b_amount) internal view returns (uint128, uint128) {
		if (fee.numerator == 0 || fee.denominator == 0){
			return (b_amount, 0);
		}
		uint128 a_fee = math.muldivc(b_amount, fee.numerator, fee.denominator);
		uint128 expected_a_amount = math.muldiv(b_amount, fee.denominator - fee.numerator, fee.denominator);
		return (expected_a_amount, a_fee);
	}

	function _expectedSpendAmountOfMatching(uint128 b_amount) internal view returns (uint128, uint128) {
		if (fee.matchingNumerator == 0 || fee.matchingDenominator == 0) {
			return (b_amount, 0);
		}

		uint128 a_fee = math.muldivc(b_amount, fee.matchingNumerator, fee.matchingDenominator);
		uint128 expected_a_amount = math.muldiv(b_amount, fee.matchingDenominator - fee.matchingNumerator, fee.matchingDenominator);
		return (expected_a_amount, a_fee);
	}

	function transferMatchingReward(
		uint128 reward,
		uint128 deployWalletValue,
		address sendGasTo
	) private {
		if (reward > 0) {
			TvmCell emptyPayload;
			(
				uint128 expectedReward,
				uint128 expectedFeeOnReward
			) = _expectedSpendAmountOfMatching(reward);

			if (expectedFeeOnReward > 0) {
				ITokenWallet(spentWallet).transfer{
					value: OrderGas.TRANSFER_MIN_VALUE,
					flag: MsgFlag.SENDER_PAYS_FEES,
					bounce: false
				}(
					expectedFeeOnReward,
					fee.beneficiary,
					deployWalletValue,
					sendGasTo,
					false,
					emptyPayload
				);
			}

			if (expectedReward > 0) {
				ITokenWallet(spentWallet).transfer{
					value: OrderGas.TRANSFER_MIN_VALUE,
					flag: MsgFlag.SENDER_PAYS_FEES,
					bounce: false
				}(
					expectedReward,
					sendGasTo,
					deployWalletValue,
					sendGasTo,
					false,
					emptyPayload
				);
			}

			currentAmountSpentToken -= reward;
		}
	}

	function enableEmergency(uint256 _emergencyManager) external override onlyFactory {
		require(msg.sender.value != 0 && msg.sender == factory);
		require(
			state != OrderStatus.Emergency,
			OrderErrors.EMERGENCY_STATUS_NOW
		);

		prevState = state;
		state = OrderStatus.Emergency;
		emergencyManager = _emergencyManager;

		emit StateChanged(prevState, state, buildDetails());
	}

	function disableEmergency() external override onlyFactory {
		require(msg.sender.value != 0 && msg.sender == factory);
		require(
			state == OrderStatus.Emergency,
			OrderErrors.EMERGENCY_STATUS_NOW
		);

		state = prevState;
		prevState = 0;
		emergencyManager = 0;

		emit StateChanged(
			OrderStatus.Emergency,
			state,
			buildDetails()
		);
	}

	function proxyTokensTransfer(
		address _tokenWallet,
		uint128 _gasValue,
		uint128 _amount,
		address _recipient,
		uint128 _deployWalletValue,
		address _remainingGasTo,
		bool _notify,
		TvmCell _payload
	) public view onlyEmergencyManager {

		require(
			state == OrderStatus.Emergency,
			OrderErrors.NOT_EMERGENCY_STATUS_NOW
		);
		tvm.accept();

		ITokenWallet(_tokenWallet).transfer{
			value: _gasValue,
			flag: MsgFlag.SENDER_PAYS_FEES
		}(
			_amount,
			_recipient,
			_deployWalletValue,
			_remainingGasTo,
			_notify,
			_payload
		);
	}

	function sendGas(
		address to,
		uint128 _value,
		uint16 _flag
	) public view onlyEmergencyManager {
		require(
			state == OrderStatus.Emergency,
			OrderErrors.NOT_EMERGENCY_STATUS_NOW
		);
		tvm.accept();
		to.transfer({value: _value, flag: _flag, bounce: false});
	}

	function upgrade(
		TvmCell _code,
		uint32 _newVersion,
		address _sendGasTo
	) external override onlyFactory {
		if (version == _newVersion) {
			tvm.rawReserve(OrderGas.TARGET_BALANCE, 0);
			_sendGasTo.transfer({
					value: 0,
					flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
			});
		} else {
			emit OrderCodeUpgraded();

			TvmCell data = abi.encode(
				factory, root, owner, spentToken, receiveToken, timeTx, nowTx,
				expectedAmount, initialAmount, currentAmountSpentToken, currentAmountReceiveToken,
				backPK, backMatchingPK, dexRoot, dexPair, spentWallet, receiveWallet, orderPlatformCode,
				state, swapAttempt, prevState, emergencyManager, autoExchange, fee, matchingOrder, version, _newVersion
			);

			tvm.setcode(_code);
			tvm.setCurrentCode(_code);

			onCodeUpgrade(data);
		}
	}

	function onCodeUpgrade(TvmCell data) private {}
}

pragma ton-solidity >= 0.62.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./libraries/OrderGas.tsol";
import "./libraries/OrderErrors.tsol";

import "./structures/IOrderRootCreateResult.tsol";

import "./interfaces/IOrderRoot.tsol";
import "./interfaces/IOrderFactory.tsol";
import "./interfaces/IOrderRootCallbacks.tsol";
import "./interfaces/IOrderRootEvents.tsol";

import "./Order.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "tip3/contracts/interfaces/ITokenRoot.tsol";
import "tip3/contracts/interfaces/ITokenWallet.tsol";
import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

contract OrderRoot is IOrderRoot, IOrderRootEvents, IAcceptTokensTransferCallback {
    address factory;
    address spentToken;
    
    uint32 version;
    uint32 versionOrder;

    TvmCell orderCode;
    TvmCell orderPlatformCode;

    address spentTokenWallet;
    address deployer;
    address dexRoot;

    OrderFeeParams fee;

    constructor() public { revert(); }

    modifier onlyFactory() {
        require(
            msg.sender.value != 0 && msg.sender == factory,
            OrderErrors.NOT_FACTORY_LIMIT_ORDER_ROOT
        );
        _;
    }

    function onTokenWallet(address _wallet) external {
        require(
            msg.sender.value != 0 && msg.sender == spentToken,
            OrderErrors.NOT_TOKEN1_ROOT
        );
        tvm.rawReserve(address(this).balance - msg.value, 0);
        spentTokenWallet = _wallet;

        IOrderFactory(factory).onOrderRootDeployedCallback{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED
        }(address(this), spentToken, deployer);
    }

    function onTokenWalletReceive(address _wallet) external {}
    function onTokenWalletBeneficiary(address _wallet) external {}

    onBounce(TvmSlice body) external view {
        tvm.rawReserve(OrderGas.TARGET_BALANCE, 0);
        uint32 functionId = body.decode(uint32);

        if (
            functionId == tvm.functionId(ITokenRoot.deployWallet) &&
            msg.sender == spentToken
        ){
            deployer.transfer(
                0,
                false,
                MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
            );
        }
    }

    function getFeeParams() override external view responsible returns (OrderFeeParams params) {
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (fee);
	}

    function getVersion() override external view responsible returns (uint32) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (version);
    }

    function getSpentToken() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (spentToken);
    }

    function getFactory() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (factory);
    }

    function getDeployer() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (deployer);
    }

    function getDex() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (dexRoot);
    }

    function expectedAddressOrder(
        address _factory,
        address _root,
        address _owner,
        address _spentToken,
        address _receiveToken,
        uint64 timeTx,
        uint64 nowTx
    ) override external view responsible returns (address)
    {
        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } address(tvm.hash(tvm.buildStateInit({
            contr: Order,
            varInit: {
                factory: _factory,
                root: _root,
                owner: _owner,
                spentToken: _spentToken,
                receiveToken: _receiveToken,
                timeTx: timeTx,
                nowTx: nowTx
            },
            code: orderCode
            })
        ));
    }

    function setFeeParams(OrderFeeParams params) override external onlyFactory() {
        tvm.rawReserve(OrderGas.TARGET_BALANCE, 0);
        fee = params;
        factory.transfer(
            0,
            false,
            MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
        );
    }

    function buildPayload(
        uint64 callbackId,
        address tokenReceive,
        uint128 expectedTokenAmount,
        uint128 deployWalletValue,
        uint256 backPK,
        uint256 backMatchingPK
    ) external pure returns (TvmCell) {
        TvmBuilder builderBackendPK;
        builderBackendPK.store(backPK);
        builderBackendPK.store(backMatchingPK);

        TvmBuilder builder;
        builder.store(callbackId);
        builder.store(tokenReceive);
        builder.store(expectedTokenAmount);
        builder.store(deployWalletValue);
        builder.storeRef(builderBackendPK);

        return builder.toCell();
    }

    function onAcceptTokensTransfer(
        address tokenRoot,
        uint128 amount,
        address sender,
        address, /*senderWallet*/
        address originalGasTo,
        TvmCell payload
    ) external override {
        require(msg.sender.value != 0);
        tvm.rawReserve(address(this).balance - msg.value, 0);

        TvmSlice payloadSlice = payload.toSlice();
        uint64 callbackId;
        if (payloadSlice.bits() >= 64) {
            callbackId = payloadSlice.decode(uint64);
        }

        TvmSlice dataPK = payloadSlice.loadRefAsSlice();

        if (
            msg.sender.value >= OrderGas.DEPLOY_ORDER_MIN_VALUE + OrderGas.DEPLOY_ORDER_MIN_VALUE_IN_ROOT &&
            msg.sender == spentTokenWallet &&
            payloadSlice.bits() == 523 && dataPK.bits() == 512
        ){
            (
                address receiveToken,
                uint128 expectedAmount,
                uint128 deployWalletValue
            ) = payloadSlice.decode(address, uint128, uint128);

            address orderAddress = _createOrder(
                expectedAmount,
                amount,
                sender,
                receiveToken,
                dataPK
            );

            emit CreateOrder(orderAddress, tokenRoot, amount, receiveToken, expectedAmount);

            if (callbackId > 0) {
                IOrderRootCallbacks(sender).onOrderCreateOrderSuccess{
                    value: OrderGas.OPERATION_CALLBACK_BASE,
                    flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
                    bounce: false
                }(callbackId);
            }

            ITokenRoot(receiveToken).deployWallet { 
                value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
                flag: MsgFlag.SENDER_PAYS_FEES,
                callback: OrderRoot.onTokenWalletReceive
            }(sender, OrderGas.DEPLOY_EMPTY_WALLET_GRAMS);

            ITokenRoot(receiveToken).deployWallet {
                value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
                flag: MsgFlag.SENDER_PAYS_FEES,
                callback: OrderRoot.onTokenWalletBeneficiary
            }(fee.beneficiary, OrderGas.DEPLOY_EMPTY_WALLET_GRAMS);

            ITokenWallet(msg.sender).transfer{
                value: 0, flag: MsgFlag.ALL_NOT_RESERVED,
                bounce: false
            }(
                amount,
                orderAddress,
                (deployWalletValue <= OrderGas.DEPLOY_EMPTY_WALLET_GRAMS? deployWalletValue:OrderGas.DEPLOY_EMPTY_WALLET_GRAMS),
                originalGasTo,
                true,
                payload
            );
        } else {
            emit CreateOrderReject();
            if (callbackId > 0){
                IOrderRootCallbacks(sender).onOrderCreateOrderReject{
                    value: OrderGas.OPERATION_CALLBACK_BASE,
                    flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
                    bounce: false
                }(callbackId);
            }

            TvmCell emptyPayload;
            ITokenWallet(msg.sender).transfer{
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            }(
                amount,
                sender, 
                uint128(0),
                originalGasTo,
                true,
                emptyPayload
            );
        }
    }

    function _createOrder(
        uint128 _expectedAmount,
        uint128 _amount,
        address _sender,
        address _receiveToken,
        TvmSlice _dataPK
    ) private returns(address){
        (
            uint256 backPubKey,
            uint256 backMatchingPK
        ) = _dataPK.decode(uint256, uint256);

        return (new Order {
            stateInit: buildState(_sender, orderCode, _receiveToken),
            value: OrderGas.DEPLOY_ORDER_MIN_VALUE
        }(
            _expectedAmount,
            _amount,
            backPubKey,
            backMatchingPK,
            dexRoot,
            fee,
            orderPlatformCode,
            version
        ));
    }

    function buildState(
        address sender,
        TvmCell _code,
        address _receiveToken
    ) internal view returns (TvmCell){
        return tvm.buildStateInit({
            contr: Order,
            varInit: {
                factory: factory,
                root: address(this),
                owner: sender,
                spentToken: spentToken,
                receiveToken: _receiveToken,
                timeTx: tx.timestamp,
                nowTx: uint64(now)
                },
            code: _code
        });
    }

    function upgrade(
        TvmCell _code, 
        uint32 _newVersion, 
        address _sendGasTo
    ) external override onlyFactory() {
        if (version == _newVersion) {
            tvm.rawReserve(address(this).balance - msg.value, 0);
            _sendGasTo.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS });
        } else {
            emit OrderRootCodeUpgraded(_newVersion);

            TvmCell data = abi.encode(
                factory, spentToken, version, _newVersion, versionOrder,
                orderCode, orderPlatformCode, spentTokenWallet, deployer,
                dexRoot, fee
            );

            tvm.setcode(_code);
            tvm.setCurrentCode(_code);

            onCodeUpgrade(data);
        }
    }

    function onCodeUpgrade(TvmCell _data) private {
        tvm.rawReserve(OrderGas.TARGET_BALANCE, 0);
        tvm.resetStorage();

        TvmCell data;
        (
            factory, spentToken, version,
            versionOrder, deployer, fee, data
        ) = abi.decode(_data, (address, address, uint32, uint32, address, OrderFeeParams, TvmCell));

        (dexRoot, orderCode, orderPlatformCode) = abi.decode(data, (address, TvmCell, TvmCell));

        ITokenRoot(spentToken).deployWallet{
            value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            callback: OrderRoot.onTokenWallet
        }(
            address(this),
            OrderGas.DEPLOY_EMPTY_WALLET_GRAMS
        );

        deployer.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
            bounce: false
        });
    }
}

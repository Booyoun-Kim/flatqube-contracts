pragma ton-solidity >= 0.62.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../libraries/OrderGas.tsol";
import "../libraries/OrderErrors.tsol";

import "../interfaces/IOrderRoot.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

contract TestNewOrderRoot is IOrderFeeParams {
    address factory;
    address spentToken;

    uint32 version;
    uint32 versionOrder;

    TvmCell orderCode;
    TvmCell orderPlatformCode;

    address spentTokenWallet;
    address deployer;
    address dexRoot;
    string newTestField;

    OrderFeeParams fee;

    constructor() public { revert(); }

    modifier onlyFactory() {
        require(
            msg.sender.value != 0 && msg.sender == factory,
            OrderErrors.NOT_FACTORY_LIMIT_ORDER_ROOT
        );
        _;
    }

    function getVersion() external view responsible returns (uint32) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } version;
    }

    function upgrade(
        TvmCell _code,
        uint32 _newVersion,
        address _sendGasTo
    ) external  onlyFactory {
        if (version == _newVersion) {
            tvm.rawReserve(address(this).balance - msg.value, 0);
            _sendGasTo.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS });
        } else {
            TvmCell data = abi.encode(
                factory, spentToken, version, _newVersion, versionOrder,
                orderCode, orderPlatformCode, spentTokenWallet, deployer,
                dexRoot, fee
            );

            tvm.setcode(_code);
            tvm.setCurrentCode(_code);

            onCodeUpgrade(data);
        }
    }

    function onCodeUpgrade(TvmCell _data) private {
        tvm.rawReserve(OrderGas.TARGET_BALANCE, 0);
        tvm.resetStorage();

        uint32 oldVersion;
        (
            factory, spentToken, oldVersion, version, versionOrder, orderCode,
            orderPlatformCode, spentTokenWallet, deployer, dexRoot, fee
        ) = abi.decode(_data, (
            address, address, uint32, uint32, uint32,
            TvmCell, TvmCell, address, address, address, OrderFeeParams
            ));
        newTestField = "New Order Root";

        factory.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
        });
    }

    function newFunc() public view returns (string) {
        return newTestField;
    }
}